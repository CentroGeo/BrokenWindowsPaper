[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BOOK_PAPER",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Aquí va la introducción y algunos antecedentes Tener muy claro el planteamiento del problema Definir subsecciones"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data Acquisition and Preprocessing",
    "section": "",
    "text": "3 Adquisition\nCenso de poblacion 2020\nDescarga masiva Manzanas\nLlamadas del 911"
  },
  {
    "objectID": "data.html#concentración-de-desventajas",
    "href": "data.html#concentración-de-desventajas",
    "title": "2  Data Acquisition and Preprocessing",
    "section": "4.1 Concentración de desventajas",
    "text": "4.1 Concentración de desventajas\nConstruido a partir de cuatro dimensiónes (con base a censo 2010) y reducidad a una componente principal por PCA. Las dimensiones que se exponen en el articulo son: - Porcentaje de masculinos de 15 a 29 - Porcentaje de población sin servicios a salud - Promedio de habitantes que ocupan un hogar privado - Porcentaje de personas que hablan una lengua indigena\nCon base al Censo de población de 2020, las dimensiones se resumen de la forma:\n\n\n\n\n\nClave\nDescripción\n\n\n\n\nP_15A17_M\nPoblación masculina de 15 a 17 años\n\n\nP_18A24_M\nPoblación masculina de 18 a 24 años\n\n\nPSINDER\nPoblación sin afiliación a servicios de salud\n\n\nPROM_OCUP\nPromedio de ocupantes en viviendas particulares habitadas\n\n\nP3YM_HLI\nPoblación de 3 años y más que habla alguna lengua indígena\n\n\n\n\n\n\n\nLa primer parte consta de cargar la base de datos de censo, seleccionar las dimensiones, limpiar la información y preparala para poder hacerla únion de estas en la geometry de la unidd geografica manzanas. Se cargan las librerias necesarias.\n\n\n\n## Librerias \n\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport contextily as ctx\nimport matplotlib.pyplot as plt\nfrom IPython.display import Markdown\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n### Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nSe carga la información del Censo por unidad manzanas conservando unicamente los campos de interes: ENTIDAD, NOM_ENT, MUN, NOM_MUN LOC, NOM_LOC, AGEB, MZA, POBTOT, P_15A17_M, P_18A24_M, PSINDER, PROM_OCUP y P3YM_HLI\n\n\nDe la base de datos filtramos eliminando las filas que contienen los totales\n\n\nCENSO_2020 =  pd.read_csv(Entradas + 'MANZANAS.csv', encoding = 'Latin-1')\nCENSO_2020 = CENSO_2020 [['ENTIDAD','NOM_ENT','MUN',\n                          'NOM_MUN','LOC','NOM_LOC',\n                          'AGEB','MZA','POBTOT', \n                          'P_15A17_M','P_18A24_M','PSINDER',\n                          'PROM_OCUP', 'P3YM_HLI']]\n\nValues = ['Total de la entidad','Total del municipio',\n         'Total de la localidad urbana', 'Total AGEB urbana']\n\nCENSO_2020 = CENSO_2020.query(\"NOM_LOC != @Values\")\n\nCENSO_2020.head(2)                         \n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      AGEB\n      MZA\n      POBTOT\n      P_15A17_M\n      P_18A24_M\n      PSINDER\n      PROM_OCUP\n      P3YM_HLI\n    \n  \n  \n    \n      4\n      9\n      Ciudad de México\n      2\n      Azcapotzalco\n      1\n      Azcapotzalco\n      10\n      1\n      159\n      *\n      8\n      27\n      3.31\n      0\n    \n    \n      5\n      9\n      Ciudad de México\n      2\n      Azcapotzalco\n      1\n      Azcapotzalco\n      10\n      2\n      145\n      *\n      7\n      46\n      3.45\n      0\n    \n  \n\n\n\n\n\nDentro de la base de datos existe la presencia de filas donde los valores son simbolos o caracteres especiales(*, N/D, 99999, etc), por lo que es necesario remplazarlos por valores NAN.\n\n\nCENSO_2020 = CENSO_2020.replace({'999999999': np.nan, \n                                 '99999999': np.nan,\n                                 '*': np.nan,\n                                 'N/D': np.nan})\n                  \nDIM_NUM = CENSO_2020.iloc[: , -6:].columns.tolist()\nDIM_TEXT = CENSO_2020.iloc[:, :8].columns.tolist()\n\nCENSO_2020[DIM_NUM] = CENSO_2020[DIM_NUM].astype('float')\nCENSO_2020[DIM_TEXT] = CENSO_2020[DIM_TEXT].astype(str)\n\n\nDe igual manera la información referida a a las columnas de “Entidad, Municipio, Localidad, AGEB y Manzana”, no presetan el formato necesario para crear la columna CVEGEO, por lo que debemos completar la información de la forma correcta.\n\n\nCreada la columna CVEGEO, calculamos la dimensión población masculina de 15 a 24 años como la suma de “P_15A17_M y P_18A24_M”. Una vez que hemos creado la dimensión se hacen poco necesarias “P_15A17_M y P_18A24_M, por lo que se eliminan.\n\n\n## Corrección de información\nCENSO_2020['ENTIDAD'] = CENSO_2020['ENTIDAD'].str.zfill(2)\nCENSO_2020['MUN'] = CENSO_2020['MUN'].str.zfill(3)\nCENSO_2020['LOC'] = CENSO_2020['LOC'].str.zfill(4)\nCENSO_2020['AGEB'] = CENSO_2020['AGEB'].str.zfill(4)  \nCENSO_2020['MZA'] = CENSO_2020['MZA'].str.zfill(3)\n\nCENSO_2020['CVEGEO'] = CENSO_2020[['ENTIDAD', 'MUN',\n                                   'LOC','AGEB','MZA']].agg(''.join, axis=1)\n\n## Cálculo de Población masculina de 15 a 24 años\nCENSO_2020['P_15A24_M'] = CENSO_2020[[\"P_15A17_M\", \n                                      \"P_18A24_M\"]].sum(axis = 1, \n                                                        min_count = 1)\n\n## Eliminación de dimensiones\nCENSO_2020 = CENSO_2020.drop(['P_15A17_M','P_18A24_M'], axis = 1)\n\nCENSO_2020.head(2)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      AGEB\n      MZA\n      POBTOT\n      PSINDER\n      PROM_OCUP\n      P3YM_HLI\n      CVEGEO\n      P_15A24_M\n    \n  \n  \n    \n      4\n      09\n      Ciudad de México\n      002\n      Azcapotzalco\n      0001\n      Azcapotzalco\n      0010\n      001\n      159.0\n      27.0\n      3.31\n      0.0\n      0900200010010001\n      8.0\n    \n    \n      5\n      09\n      Ciudad de México\n      002\n      Azcapotzalco\n      0001\n      Azcapotzalco\n      0010\n      002\n      145.0\n      46.0\n      3.45\n      0.0\n      0900200010010002\n      7.0\n    \n  \n\n\n\n\n\nSe carga la base de datos geoespacial que corresponde a la unidad geografica de “manzanas”. Para este caso, el archivo se encuentra en formato “json”. Del archivo, unicamente consideramos las columnas “CVEGEO y geometry”\n\n\n### Se carga el archivo espacial de Manzanas\n\nMANZA_CDMX = gpd.read_file(Entradas +'MANZA_CDMX.json')\nMANZA_CDMX = MANZA_CDMX[['CVEGEO','geometry']]\nMANZA_CDMX.head(2)\n\n\n\n\n\n  \n    \n      \n      CVEGEO\n      geometry\n    \n  \n  \n    \n      0\n      0901000010898031\n      POLYGON ((-99.22982 19.35939, -99.23006 19.359...\n    \n    \n      1\n      0901000012269024\n      POLYGON ((-99.21840 19.36539, -99.21848 19.365...\n    \n  \n\n\n\n\n\nUnion (merge) de las unidades geoespaciales con la información del Censo de Población y vivienda 2020. En este punto a cada unidad geografica le asignamos la información del censo de población.\n\n\n### Union a la izquierda con campo llave primaria \"CVEGEO\" #### Mantener Merge con cualquiera de los dos :)\nMERGE = MANZA_CDMX.merge( CENSO_2020,\n                          left_on = 'CVEGEO',\n                          right_on = 'CVEGEO',\n                          how = 'inner')\nMERGE.head(2)          \n\n\n\n\n\n  \n    \n      \n      CVEGEO\n      geometry\n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      AGEB\n      MZA\n      POBTOT\n      PSINDER\n      PROM_OCUP\n      P3YM_HLI\n      P_15A24_M\n    \n  \n  \n    \n      0\n      0901000010898031\n      POLYGON ((-99.22982 19.35939, -99.23006 19.359...\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      0898\n      031\n      93.0\n      16.0\n      4.04\n      0.0\n      3.0\n    \n    \n      1\n      0901000012269024\n      POLYGON ((-99.21840 19.36539, -99.21848 19.365...\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      2269\n      024\n      6.0\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\n\nSiempre es importante saber en que sistema de proyección se encuentran nuestros datos, para eso usamos “crs”\n\n\nMERGE.crs\n\n<Geographic 2D CRS: EPSG:4326>\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\n\nHacemos un mapa de P_15A24_M para ver su distribución espacial.\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\nax = MERGE.plot(ax = ax, column='P_15A24_M',\n                legend=False,\n                alpha=0.8,\n                scheme='NaturalBreaks',\n                cmap='copper',\n                classification_kwds={'k':6})\nax.set(title='Población Masculina 15 a 24 años, Ciudad de México')\n\nax.set_axis_off()\n\nplt.show()\n\n\n\n\n\nHasta el punto anterior tenemos la información contenida dentro de las manzanas, el paso que sigue es llevar las manzanas a colonias. Para esto es necesario entender que ambos elementos son poligonales y que los centroides de manzanas no necesariamente refieren a la solución contenida dentro de un poligono mayor.\n\n\nPor eso es necesario usar el criterio de maxima área de la sobreposición de poligonos. Al hablar de área el sistema de proyección debe estar en metros, por lo que si no lo esta se debe cambiar. Para este caso se cambio a EPSG:6362\n\n\nSe cargan las colonias y se valida que ambos crs se encuentren en metros “6362 o 6362” , en caso contrario es necesrio llevar a cabo una reproyección.\n\n\nCOLONIAS_CDMX = gpd.read_file(Entradas +'COLONIAS.json')\nprint(\"Colonias CRS\", COLONIAS_CDMX.crs)\nprint(\"Manzanas CRS\", MERGE.crs)\n\nColonias CRS epsg:4326\nManzanas CRS epsg:4326\n\n\n\nLos archivos estan en coordenadas geograficas, por lo que se reproyecta\n\n\nMERGE = MERGE.to_crs(6362)\nCOLONIAS_CDMX = COLONIAS_CDMX.to_crs(6362)\n\nprint(\"Crs Manzanas\", MERGE.crs )\nprint(\"Crs Colonias\", COLONIAS_CDMX.crs )\n\nCrs Manzanas epsg:6362\nCrs Colonias epsg:6362\n\n\n\nBuscamos en este punto identificar la intersección entre colonias y manzanas para asignar a cada manzana (base al criterio de área maxima) la clave de la colonia a la que pertence.\n\n\nINTERSECCION = gpd.overlay(COLONIAS_CDMX,\n                           MERGE,\n                           how = 'intersection')\n\n\nSe calcula el valor de área para cada poligono intersectado\n\n\n## Se calcula el area \nINTERSECCION['area'] = INTERSECCION.geometry.area\n\n\nPara el overlay se reordena la información del área de manera descendente y se eliminan los duplicados con base a la “CVEGEO” manteniendo unicamente el primer valor\n\n\nINTERSECCION = (INTERSECCION.sort_values('area', ascending = False).\n                drop_duplicates(subset=\"CVEGEO\", keep = 'first').\n                drop(['geometry','area'], axis = 1))\n\n### Se eliminan columnas no necesarias\nINTERSECCION = INTERSECCION.drop(['ENT', 'CVEDT', 'NOMDT', 'DTTOLOC'], axis = 1) #### Se mantiene solo uno \n\n\nEn la base de colonias se identificaron caracteres especiales, por lo que se procede a remplazarlos, por su valor correspondiente.\n\n\nDic_Ca = {'Ã‘': 'Ñ'}\nINTERSECCION.replace(Dic_Ca, inplace=True, regex=True)\nINTERSECCION.columns = INTERSECCION.columns.to_series().replace(Dic_Ca, regex=True)\n\nINTERSECCION.shape\n\n(66353, 17)\n\n\n\nSe une la información de overly de las Manzanas ya alineadas con colonias en la geometry de las manzanas para tener la base final. En la base final podemos observar la información a nivel: manzana, colonia y alcaldia, donde esta ultima se extraer en razon directa de la informacion contenida en la base de manzanas.\n\n\nReordenamos la información de la forma “Regional a local” es decir:\n\n\\[ Alcaldia \\to Colonia \\to Manzana \\]\n\nAlcaldia: ENTIDAD, NOM_ENT, MUN, NOM_MUN, LOC, NOM_LOC,\n\nColonia: ID_COL, CVE_COL, NOM_COL,\nManzana: AGEB, MZA, CVEGEO,\nDimensiones: POBTOT, PSINDER, PROM_OCUP, P3YM_HLI, P_15A24_M\nGeometry\n\n\nDATA_FINAL_USE = MANZA_CDMX.merge(INTERSECCION,\n                                  left_on = 'CVEGEO',\n                                  right_on = 'CVEGEO',\n                                  how = 'inner').rename({\"CVEUT\": \"CVE_COL\", \"NOMUT\": \"NOM_COL\", \"ID\": \"ID_COL\"}, \n                                                        axis = 1)\n\nDATA_FIN_USE = DATA_FINAL_USE[['ENTIDAD','NOM_ENT', 'MUN', 'NOM_MUN', 'LOC', 'NOM_LOC',\n                               'ID_COL','CVE_COL', 'NOM_COL', 'AGEB', 'MZA', 'CVEGEO',\n                               'PSINDER', 'PROM_OCUP', 'P3YM_HLI', 'P_15A24_M',\n                               'geometry']]\n\nprint(\"Forma de los datos: \", DATA_FINAL_USE.shape)\n\nDATA_FIN_USE.head(3)\n\nForma de los datos:  (66353, 18)\n\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      MZA\n      CVEGEO\n      PSINDER\n      PROM_OCUP\n      P3YM_HLI\n      P_15A24_M\n      geometry\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      031\n      0901000010898031\n      16.0\n      4.04\n      0.0\n      3.0\n      POLYGON ((-99.22982 19.35939, -99.23006 19.359...\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1716\n      10-143\n      LOMAS DE TARANGO\n      2269\n      024\n      0901000012269024\n      NaN\n      NaN\n      NaN\n      NaN\n      POLYGON ((-99.21840 19.36539, -99.21848 19.365...\n    \n    \n      2\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1652\n      10-082\n      GRAL A ROSALES\n      1472\n      068\n      0901000011472068\n      22.0\n      3.76\n      NaN\n      9.0\n      POLYGON ((-99.24577 19.37776, -99.24576 19.377...\n    \n  \n\n\n\n\n\nSe valida que cada manzana este asociada a cada una de las colonias\nRecorndado que la relación es una colonia a muchas manzanzanas\n“” Por lo que no deben existir manzanas repetididas”\n\n\\[M_{n-1} = f(C)\\] \\[ C \\gets M_{n-1}\\]\n\nSe valida que no existan manzanas repetidas\n\n\nDATA_FINAL_USE.CVEGEO.value_counts()\n\n\nLa relacion de muchas manzanas a una colonia, se valida para cada clave de colonias se repite tantas veces existan manzanas\n\n\nDATA_FINAL_USE.CVE_COL.value_counts()\n\n07-320    471\n07-263    370\n17-078    297\n17-076    213\n11-057    213\n         ... \n04-005      1\n10-202      1\n10-206      1\n10-051      1\n10-007      1\nName: CVE_COL, Length: 1797, dtype: int64\n\n\n\nAqui validamos como las claves de las manzanas son diferentes para una misma colonia y se entiende la relacion, muchas manzanas a una colonia\n\n\nDATA_FINAL_USE.query('CVE_COL == \"07-320\"').head(3)\n\n\n\n\n\n  \n    \n      \n      CVEGEO\n      geometry\n      CVE_COL\n      NOM_COL\n      ID_COL\n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      AGEB\n      MZA\n      POBTOT\n      PSINDER\n      PROM_OCUP\n      P3YM_HLI\n      P_15A24_M\n    \n  \n  \n    \n      51265\n      0900700014594012\n      POLYGON ((-99.05630 19.37395, -99.05642 19.373...\n      07-320\n      CHINAMPAC DE JUAREZ III\n      793\n      09\n      Ciudad de México\n      007\n      Iztapalapa\n      0001\n      Iztapalapa\n      4594\n      012\n      36.0\n      9.0\n      2.77\n      0.0\n      0.0\n    \n    \n      51303\n      0900700014645010\n      POLYGON ((-99.05146 19.37286, -99.05154 19.372...\n      07-320\n      CHINAMPAC DE JUAREZ III\n      793\n      09\n      Ciudad de México\n      007\n      Iztapalapa\n      0001\n      Iztapalapa\n      4645\n      010\n      23.0\n      10.0\n      2.88\n      0.0\n      NaN\n    \n    \n      51304\n      0900700014611041\n      POLYGON ((-99.05389 19.37262, -99.05333 19.374...\n      07-320\n      CHINAMPAC DE JUAREZ III\n      793\n      09\n      Ciudad de México\n      007\n      Iztapalapa\n      0001\n      Iztapalapa\n      4611\n      041\n      0.0\n      0.0\n      0.00\n      0.0\n      0.0"
  },
  {
    "objectID": "data.html#el-jardín-de-las-bifurcaciones",
    "href": "data.html#el-jardín-de-las-bifurcaciones",
    "title": "2  Data Acquisition and Preprocessing",
    "section": "5.1 El jardín de las bifurcaciones",
    "text": "5.1 El jardín de las bifurcaciones\n\nEn esta seccion usaremos para calcular los valores de desorden social y fisico, usaremos dos formas: las claves de las manzanas y las coordenadas geograficas a fin de comparar resultados.\n\n\n5.1.1 Corrección columna clave de manzana\n\nInicialmente notamos de nuestra base de datos las columnas manzana, longitud y latitud. Para la primer bifurcación usaremos las claves de manzanas que se encuentran asignadas. Al hacer esto nos damos cuenta que necesitamos una limpieza de datos. Lo anterior por:\n\n\nEl tipo de dato es string esta en su forma es cientifico,\nTenemos que transformar los string a numeros aplicando la funcion “to_numeric”\nSe extiende el numero de su forma cientifica a su forma natural\nLos elementos con caracteres alfanumericos se asignan como “NAN”.\n\n\nEn este punto podemos notar que ya tenemos el string cientifico en “float”, lo que tenemos que hacer es extraer el numero sin notación cientifica, para eso aplicamos una funcion “lamnda” que convierta el float en string sin notación cientifica y los “nan_text” sean remplazamos por “NAN” verdaderos.\n\n\n\n\n\n\n\nImpotante\n\n\n\nRecordar que las claves comienzan con un cero y que el total de caracteres para manzanas son 16.\nCVEGEO = “0900700000000000”\n\n\n\n## Transformación de string to float \nManza_Num = pd.DataFrame(pd.to_numeric(All_Data_filtered['manzana'], errors = 'coerce'))\n\n## Se extiende el numero a su forma natural\nManza_Num = pd.DataFrame(Manza_Num['manzana'].apply(lambda x: '%.0f' %x)).replace('nan', np.nan)\n\n### Recordando que las claves comienzan con un cero y que para manzanas es un total de 16 caracteres\n### Asignamos el cero\n\nManza_Num['manzana'] = Manza_Num['manzana'].str.zfill(16)\n\nManza_Num.shape\n\n(301784, 1)\n\n\n\nYa tenemos un dataframe con las claves en string y los indices como campo llave primaria con NAN verdaderos\n\n\nAhora vamos a hacer una union entre estos resultados y los el dataframe filtrado (All_Data_filtered) con base a su indice. Al ser un merge por indices, es recomendable que este este reiniciado (por lo que se entiende la necesidad de su reinicio en procesos anteriores).\n\n\nDe la union tendremos dos columnas con claves manzanas, las cuales las usaremos en una función para asignnación de clave corregida\n\n\n### Union entre tablas\nUSO_MANZAS = All_Data_filtered.merge(Manza_Num,\n                                     left_index = True,\n                                     right_index = True)\nUSO_MANZAS.head(3)                                   \n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      manzana_x\n      latitud\n      longitud\n      manzana_y\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      9.007E+14\n      19.368088\n      -99.132832\n      0900700000000000\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      9.007E+14\n      19.354583\n      -99.061529\n      0900700000000000\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      FIESTA\n      9.003E+14\n      19.332512\n      -99.175247\n      0900300000000000\n    \n  \n\n\n\n\n\nLa asignacion de clave correcta: se lleva a cabo considerando las combianciones de resultados posibles entre las dos columnas de nombre manzanas (x,y). De lo anterior se obtienen las siguientes reglas de negocios:\n\n\nSi manzana_x == manzana_x & manzana_y == manzana_y, entonces el valor sera manzana_y\nSi manzana_x == manzana_x & manzana_y != manzana_y, entonces el valor sera manzana_x\nSi ninguno de los dos anteriores se cumple se asigna NAN\n\n\nCon base a las reglas se configura la función:\n\n\n### Creamos una función\ndef manzan_a(C):\n    if ((C.manzana_x == C.manzana_x) & (C.manzana_y == C.manzana_y)):\n        return C.manzana_y\n    elif ((C.manzana_x == C.manzana_x) & (C.manzana_y != C.manzana_y)):\n        return C.manzana_x\n    else:\n        return np.nan\n\n\nSe aplica la funcion y se eliminan las dimensiones no necesarias\n\n\n### Aplicamos la función\nUSO_MANZAS['CVEGEO'] = USO_MANZAS.apply(manzan_a, axis = 1)\n\n## Eliminamos las dimensiones no necesarias y tenemos la tabla de inicio\n\nUSO_MANZAS = USO_MANZAS.drop(['manzana_x', 'manzana_y'], axis = 1)\n\nUSO_MANZAS.head(3)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      latitud\n      longitud\n      CVEGEO\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      19.368088\n      -99.132832\n      0900700000000000\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      19.354583\n      -99.061529\n      0900700000000000\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      FIESTA\n      19.332512\n      -99.175247\n      0900300000000000\n    \n  \n\n\n\n\n\n\n5.1.2 Caso por Mananzas y Clave Manzanas\n\nPara este caso, vamos a contar cuantos eventos de una determinada clase en el tipo de incidentes estan inmersos en las manzanas. Para la forma con columna y claves manzanas, seleccionamos unicamente las columnas de trabajo, en este caso se eliminan longitud y latitud.\n\n\nPara contabilizar las clases en la columna haremos uso de un dataframe dummy\n\n\n### Se eliminan columnas no necesarias\n\nUSO_MANZAS_TRUE = USO_MANZAS.drop(['latitud','longitud'], axis = 1)\n\n### Para contabilizar, notamos que la descripcion del incidente esta en fila,\n### por lo que tenemos que crear un dataframe dummy\n\nUSO_MANZAS_TRUE_DMY = pd.get_dummies(USO_MANZAS_TRUE, \n                                     columns=[\"Incidente\"], \n                                     prefix=[\"DM\"])\n\nUSO_MANZAS_TRUE_DMY.head(3)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      CVEGEO\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      0900700000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      0900700000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      0900300000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n  \n\n\n\n\n\nAhora que tenemos nuestro dataframe dummy podemos contar, para lograr eso, tenemos que agrupar y sumar los eventos\n\n\n### Agrupación de dataframe Dummy\n\nMANZANA_DUMMMY = pd.DataFrame(USO_MANZAS_TRUE_DMY.groupby(['CVEGEO']).agg({'DM_AGUA_N': 'sum', \n                                                                           'DM_AGUA_P': 'sum',\n                                                                           'DM_BASURA_P': 'sum',\n                                                                           'DM_CORTO_ELE': 'sum',\n                                                                           'DM_DROGADO': 'sum',\n                                                                           'DM_EBRIO': 'sum',\n                                                                           'DM_ESCANDALO': 'sum',\n                                                                           'DM_FIESTA': 'sum',\n                                                                           'DM_FUGAS_N': 'sum',\n                                                                           'DM_GRAFITI': 'sum',\n                                                                           'DM_PERSO_R': 'sum',\n                                                                           'DM_VEHICULO': 'sum'\n                                                                          }).reset_index())\nMANZANA_DUMMMY.head(3)                                                           \n\n\n\n\n\n  \n    \n      \n      CVEGEO\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      0900000000000000\n      202.0\n      1684.0\n      190.0\n      4\n      1660.0\n      9917.0\n      8109.0\n      5349.0\n      11\n      94.0\n      439.0\n      971.0\n    \n    \n      1\n      0900200000000000\n      4.0\n      102.0\n      8.0\n      0\n      170.0\n      841.0\n      994.0\n      1353.0\n      0\n      7.0\n      15.0\n      95.0\n    \n    \n      2\n      090020001003A003\n      0.0\n      0.0\n      0.0\n      0\n      0.0\n      0.0\n      2.0\n      0.0\n      0\n      0.0\n      0.0\n      0.0\n    \n  \n\n\n\n\n\nAhora haremos oitra union y seleccionaremos aquellos elementos para crear el Desorden Social y fisico. Se unen la tabla DATA_FIN_USE y MANZANA_DUMMMY. Esto se hace en esa tabla porque debemos recordar que las manzanas tienen su asignacion de clave de colonias y alcaldias con base al criterio de maxima área.\n\n\n### Union de tablas \nSOCIAL_FISICO = DATA_FIN_USE.merge(MANZANA_DUMMMY,\n                                   left_on = 'CVEGEO',\n                                   right_on = 'CVEGEO',\n                                   how = 'left')\nSOCIAL_FISICO.head(3)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      ...\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1716\n      10-143\n      LOMAS DE TARANGO\n      2269\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1652\n      10-082\n      GRAL A ROSALES\n      1472\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n3 rows × 30 columns\n\n\n\n\n\n5.1.3 Desorden Social y Fisico a nivel Colonia\n\nDe la misma forma que se ejecuto codigo pasado, lo que necesitamos es el grupamiento de datos por nivel colonia para calcular la componente de Desorden Social por “PCA”\n\n\n### Agrupación de datos \nSOCIAL_PCA = pd.DataFrame(SOCIAL_FISICO.groupby(['CVE_COL']).agg({'POBTOT':'sum',\n                                                                  'DM_DROGADO': 'sum',\n                                                                  'DM_EBRIO':'sum',\n                                                                  'DM_ESCANDALO': 'sum',\n                                                                  'DM_FIESTA':'sum',\n                                                                  'DM_BASURA_P': 'sum',\n                                                                  'DM_PERSO_R': 'sum'}).reset_index())\nSOCIAL_PCA.head(2)\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      POBTOT\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_BASURA_P\n      DM_PERSO_R\n    \n  \n  \n    \n      0\n      02-001\n      1957.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      1\n      02-002\n      3670.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n  \n\n\n\n\n\nPCA DESORDEN SOCIAL\n\n\nDe igual manera aplicamos la funcion creada en pasos anteriores\n\n\nDESORDEN_SOCIAL = CONC_DIS(SOCIAL_PCA, 'CVE_COL','POBTOT')\nDESORDEN_SOCIAL.head(2)\n\n\n Total de la variancia explicada \n 61.258 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DISAD\n    \n  \n  \n    \n      0\n      02-001\n      -0.636744\n    \n    \n      1\n      02-002\n      -0.636744\n    \n  \n\n\n\n\n\nAhora, con las dimensioes con las que se calcula el desorden fisico, agrupamos los datos por nivel colonia para calcular la componente por “PCA”\n\n\n### Agrupamiento de datos por nivel colonia para \"PCA\" DESORDEN FISICO\n\nFISICO_PCA = pd.DataFrame(SOCIAL_FISICO.groupby(['CVE_COL']).agg({'POBTOT':'sum',\n                                                                  'DM_VEHICULO': 'sum',\n                                                                  'DM_GRAFITI':'sum',\n                                                                  'DM_AGUA_P': 'sum',\n                                                                  'DM_AGUA_N':'sum',\n                                                                  'DM_CORTO_ELE': 'sum',\n                                                                  'DM_FUGAS_N': 'sum'}).reset_index())\nFISICO_PCA.head(2)\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      POBTOT\n      DM_VEHICULO\n      DM_GRAFITI\n      DM_AGUA_P\n      DM_AGUA_N\n      DM_CORTO_ELE\n      DM_FUGAS_N\n    \n  \n  \n    \n      0\n      02-001\n      1957.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      1\n      02-002\n      3670.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n  \n\n\n\n\n\nNuevamente, aplicamos la funcion creada en pasos anteriores\n\n\n#### Aplicamos la funcion creada en pasos anteriores\n\nDESORDEN_FISICO = CONC_DIS(FISICO_PCA, 'CVE_COL','POBTOT')\nDESORDEN_FISICO.head(2)\n\n\n Total de la variancia explicada \n 35.943 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DISAD\n    \n  \n  \n    \n      0\n      02-001\n      -0.443488\n    \n    \n      1\n      02-002\n      -0.443488\n    \n  \n\n\n\n\n\n\n5.1.4 Desorden Social y Fisico a nivel Alcaldia\n\nEl agrupamiento se hace ahora por alcaldia o Municipio para desorden social\n\n\n### Agrupamiento de datos por nivel Alcaldia para \"PCA\" DESORDEN SOCIAL\n\nSOCIAL_ALPCA = pd.DataFrame(SOCIAL_FISICO.groupby(['MUN']).agg({'POBTOT':'sum',\n                                                              'DM_DROGADO': 'sum',\n                                                              'DM_EBRIO':'sum',\n                                                              'DM_ESCANDALO': 'sum',\n                                                              'DM_FIESTA':'sum',\n                                                              'DM_BASURA_P': 'sum',\n                                                              'DM_PERSO_R': 'sum'}).reset_index())\nSOCIAL_ALCAL = CONC_DIS(SOCIAL_ALPCA, 'MUN','POBTOT')\nSOCIAL_ALCAL.head(2)\n\n\n Total de la variancia explicada \n 76.681 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      DISAD\n    \n  \n  \n    \n      0\n      002\n      -0.108228\n    \n    \n      1\n      003\n      1.059589\n    \n  \n\n\n\n\n\nAplicado el agrupamiento a municipio para desorden fisico\n\n\n### Agrupamiento de datos por nivel Alcaldia para \"PCA\" DESORDEN FISICO\n\nFISICO_ALPCA = pd.DataFrame(SOCIAL_FISICO.groupby(['MUN']).agg({'POBTOT':'sum',\n                                                                'DM_VEHICULO': 'sum',\n                                                                'DM_GRAFITI':'sum',\n                                                                'DM_AGUA_P': 'sum',\n                                                                'DM_AGUA_N':'sum',\n                                                                'DM_CORTO_ELE': 'sum',\n                                                                'DM_FUGAS_N': 'sum'}).reset_index())\nFISICO_ALCAL = CONC_DIS(FISICO_ALPCA, 'MUN','POBTOT')\nFISICO_ALCAL.head(2)\n\n\n Total de la variancia explicada \n 60.443 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      DISAD\n    \n  \n  \n    \n      0\n      002\n      -1.863468\n    \n    \n      1\n      003\n      0.573604\n    \n  \n\n\n\n\n\nAhora crearemos la base de datos finales, para eso haremos una serie de uniones con toda la información a la tabla original y renombramos las columnas de lo necesario en cada nivel.\n\n\nMERGE_SOCIAL = MERGE_DESVENTAJAS.merge(DESORDEN_SOCIAL,\n                                       left_on = 'CVE_COL', \n                                        right_on = 'CVE_COL', \n                                        how = 'inner').merge(SOCIAL_ALCAL,\n                                                             left_on ='MUN',\n                                                             right_on = 'MUN',\n                                                             how = 'inner').rename({\"DISAD_x\": \"SOCIAL_COL\", \n                                                                                    \"DISAD_y\": \"SOCIAL_MUN\"}, axis = 1)\n\nMERGE_FISICO = MERGE_SOCIAL.merge(DESORDEN_FISICO,\n                                  left_on = 'CVE_COL', \n                                  right_on = 'CVE_COL', \n                                  how = 'inner').merge(FISICO_ALCAL,\n                                                       left_on ='MUN',\n                                                       right_on = 'MUN',\n                                                       how = 'inner').rename({\"DISAD_x\": \"FISICO_COL\", \n                                                                              \"DISAD_y\": \"FISICO_MUN\"}, axis = 1)\n\nMERGE_FISICO.head(5)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      ...\n      PROM_OCUP\n      P3YM_HLI\n      P_15A24_M\n      geometry\n      DIS_COL\n      DIS_MUN\n      SOCIAL_COL\n      SOCIAL_MUN\n      FISICO_COL\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      ...\n      4.04\n      0.0\n      3.0\n      POLYGON ((-99.22982 19.35939, -99.23006 19.359...\n      -0.58736\n      0.533438\n      -0.636744\n      1.033927\n      -0.443488\n      0.873328\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      ...\n      4.39\n      0.0\n      5.0\n      POLYGON ((-99.23003 19.35814, -99.23091 19.357...\n      -0.58736\n      0.533438\n      -0.636744\n      1.033927\n      -0.443488\n      0.873328\n    \n    \n      2\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      ...\n      3.54\n      0.0\n      3.0\n      POLYGON ((-99.22965 19.35917, -99.22977 19.359...\n      -0.58736\n      0.533438\n      -0.636744\n      1.033927\n      -0.443488\n      0.873328\n    \n    \n      3\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      ...\n      3.08\n      NaN\n      4.0\n      POLYGON ((-99.22887 19.35633, -99.22904 19.356...\n      -0.58736\n      0.533438\n      -0.636744\n      1.033927\n      -0.443488\n      0.873328\n    \n    \n      4\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      ...\n      3.63\n      0.0\n      10.0\n      POLYGON ((-99.22885 19.35836, -99.22903 19.358...\n      -0.58736\n      0.533438\n      -0.636744\n      1.033927\n      -0.443488\n      0.873328\n    \n  \n\n5 rows × 24 columns\n\n\n\n\nA este punto tendremos la base como la necesitamos, solo queda reordenar para un uso mas facil\n\n\nDATA_SET_FINAL = MERGE_FISICO[['ENTIDAD', 'NOM_ENT', 'MUN', 'NOM_MUN', 'LOC', 'NOM_LOC', 'ID_COL',\n                               'CVE_COL', 'NOM_COL', 'AGEB', 'MZA', 'CVEGEO', 'POBTOT',\n                               'DIS_COL', 'DIS_MUN', 'SOCIAL_COL', 'SOCIAL_MUN', 'FISICO_COL',\n                               'FISICO_MUN', 'geometry']]\n\nDATA_SET_FINAL.head(3)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      MZA\n      CVEGEO\n      POBTOT\n      DIS_COL\n      DIS_MUN\n      SOCIAL_COL\n      SOCIAL_MUN\n      FISICO_COL\n      FISICO_MUN\n      geometry\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      031\n      0901000010898031\n      93.0\n      -0.58736\n      0.533438\n      -0.636744\n      1.033927\n      -0.443488\n      0.873328\n      POLYGON ((-99.22982 19.35939, -99.23006 19.359...\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      019\n      0901000010900019\n      101.0\n      -0.58736\n      0.533438\n      -0.636744\n      1.033927\n      -0.443488\n      0.873328\n      POLYGON ((-99.23003 19.35814, -99.23091 19.357...\n    \n    \n      2\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      023\n      0901000010898023\n      99.0\n      -0.58736\n      0.533438\n      -0.636744\n      1.033927\n      -0.443488\n      0.873328\n      POLYGON ((-99.22965 19.35917, -99.22977 19.359...\n    \n  \n\n\n\n\n\nHacemos otro mapita, porque ya sabemos que nos gustan\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\nax = DATA_SET_FINAL.plot(ax = ax, column='FISICO_MUN',\n                            legend= True,\n                            alpha=0.8,\n                            scheme='NaturalBreaks',\n                            cmap='copper',\n                            classification_kwds={'k':6})\nax.set(title='Desorden Fisico a nivel Alcaldia, Ciudad de México')\n\nax.set_axis_off()\n\nplt.show()\n\n\n\n\n\nUn ultimo paso es la validación de los resultados de esta forma con los obtenidos antes de las uniones a las manzanas, para eso agrupamos y calculamos la media de cada dimension\n\n\n### validamos la informacion de las dimensiones creadas\n\nDATA_SET_FINAL.groupby(['MUN']).agg({'DIS_COL':'mean',\n                                    'DIS_MUN': 'mean',\n                                    'SOCIAL_COL':'mean',\n                                    'SOCIAL_MUN': 'mean',\n                                    'FISICO_COL':'mean',\n                                    'FISICO_MUN': 'mean'\n                                    }).reset_index()\n\n\n\n\n\n  \n    \n      \n      MUN\n      DIS_COL\n      DIS_MUN\n      SOCIAL_COL\n      SOCIAL_MUN\n      FISICO_COL\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      002\n      -0.312325\n      -0.996294\n      0.196748\n      -0.108228\n      -0.156930\n      -1.863468\n    \n    \n      1\n      003\n      -0.006193\n      -0.069455\n      0.311090\n      1.059589\n      0.293600\n      0.573604\n    \n    \n      2\n      004\n      1.106869\n      -1.304359\n      0.098220\n      -2.826147\n      -0.103746\n      -2.381901\n    \n    \n      3\n      005\n      0.565336\n      2.040898\n      0.184904\n      2.975016\n      0.329208\n      3.574120\n    \n    \n      4\n      006\n      1.201381\n      -0.650310\n      0.903878\n      0.204031\n      0.327934\n      -0.687370\n    \n    \n      5\n      007\n      1.719481\n      5.736332\n      0.224290\n      4.864047\n      0.138066\n      2.623189\n    \n    \n      6\n      008\n      0.868157\n      -1.099762\n      0.329092\n      -2.475364\n      0.275849\n      -1.962040\n    \n    \n      7\n      009\n      4.909275\n      -1.163220\n      -0.315863\n      -3.290602\n      -0.179439\n      -2.487223\n    \n    \n      8\n      010\n      0.126637\n      0.533438\n      0.098015\n      1.033927\n      0.190218\n      0.873328\n    \n    \n      9\n      011\n      1.633560\n      -0.609511\n      0.438813\n      -1.867119\n      0.587161\n      -0.548826\n    \n    \n      10\n      012\n      0.829067\n      0.688221\n      0.058954\n      -0.280469\n      0.486348\n      2.281060\n    \n    \n      11\n      013\n      2.961643\n      0.183677\n      0.006548\n      -2.229841\n      0.007994\n      -1.260814\n    \n    \n      12\n      014\n      -0.000506\n      -1.302296\n      0.735603\n      -0.326258\n      0.350952\n      -0.580746\n    \n    \n      13\n      015\n      1.070981\n      -0.151071\n      1.250985\n      1.979941\n      0.810097\n      3.063466\n    \n    \n      14\n      016\n      -0.491578\n      -1.227027\n      0.644503\n      1.155803\n      0.207842\n      -0.424593\n    \n    \n      15\n      017\n      0.548961\n      -0.609259\n      0.788632\n      0.131673\n      0.413103\n      -0.791786\n    \n  \n\n\n\n\n\nFISICO_ALCAL\n\n\n\n\n\n  \n    \n      \n      MUN\n      DISAD\n    \n  \n  \n    \n      0\n      002\n      -1.863468\n    \n    \n      1\n      003\n      0.573604\n    \n    \n      2\n      004\n      -2.381901\n    \n    \n      3\n      005\n      3.574120\n    \n    \n      4\n      006\n      -0.687370\n    \n    \n      5\n      007\n      2.623189\n    \n    \n      6\n      008\n      -1.962040\n    \n    \n      7\n      009\n      -2.487223\n    \n    \n      8\n      010\n      0.873328\n    \n    \n      9\n      011\n      -0.548826\n    \n    \n      10\n      012\n      2.281060\n    \n    \n      11\n      013\n      -1.260814\n    \n    \n      12\n      014\n      -0.580746\n    \n    \n      13\n      015\n      3.063466\n    \n    \n      14\n      016\n      -0.424593\n    \n    \n      15\n      017\n      -0.791786\n    \n  \n\n\n\n\n\n\n5.1.5 Caso por Mananzas y Puntos Geom\n\nComenzamos usando la tabla que habiamos creado con anterioridad, aquella donde se hicieron las correciones a la clave manzanada (USO_MANZAS). De la tabla se crean las geometrias las cuales necesitan tener definido un sistema de proyección.\n\n\nComo notamos en los datos, el sistema de coordendas se encuentra en longitud / latitud, por lo que se asigna una proyeccion geografica wgs84 con epsg 4326\n\n\nUSO_MANZAS_GDF = gpd.GeoDataFrame(USO_MANZAS,\n                                  geometry = gpd.points_from_xy(USO_MANZAS.longitud,\n                                                                USO_MANZAS.latitud), crs=4326)\n\n\nUSO_MANZAS_GDF.head(2)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      latitud\n      longitud\n      CVEGEO\n      geometry\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      19.368088\n      -99.132832\n      0900700000000000\n      POINT (-99.13283 19.36809)\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      19.354583\n      -99.061529\n      0900700000000000\n      POINT (-99.06153 19.35458)\n    \n  \n\n\n\n\n\nPara una visual base, hacemos un mapa de las distribuciones espaciales de alguna de las clases de la dimension Incidente. En este caso ejemplo observamos a las personas en riesgo\n\n\n### Creación de un Mapa\n\nbase = DATA_FIN_USE.plot(color ='grey',figsize=(8, 8))\n\nUSO_MANZAS_GDF.query('Incidente == \"PERSO_R\"').plot(ax = base, \n                                                    color = 'red', \n                                                    markersize = 2)\nplt.title(label = 'Población Total, Ciudad de México')\nplt.axis('off')\nplt.show()\n\n\n\n\n\nPor el camino de las geometrias, lo que buscaremos es contabilizar el número de clases de geometria punto dentro de las manzanas de geometria poligonal que contienen las claves de colonias (claves asiganadas por el criterio de área maxima). Para que eso suceda, debemos hacer un join geoespacial.\n\n\n\n5.1.6 Contabilizando los puntos dentro de poligonos\n\n### Hacemos un join geoespacial de los puntos que se encuentran contenidos dentro del poligono\n\nMANZANA_911 = gpd.sjoin(DATA_FIN_USE, \n                        USO_MANZAS_GDF[['folio', 'Categoria', \n                                       'Incidente','CVEGEO',\n                                       'geometry']], \n                         how = \"inner\", \n                         op = 'contains')\nMANZANA_911.shape\n\n(291004, 23)\n\n\n\nVeamos que sucede con la información y sus relaciones, para esto consideramos dos casos:\n\n\nCuando ambas claves CVEGEO son iguales (La clave del punto espacial es la misma clave de la manzana)\nCuando ambas claves CVEGEO son distintas (La clave asignada al punto espacial no pertenece a la manzana)\n\n\nprint(\"Total de puntos con claves diferentes: \", MANZANA_911.query('CVEGEO_left != CVEGEO_right').shape[0])\nprint(\"Total de puntos con claves iguales: \", MANZANA_911.query('CVEGEO_left == CVEGEO_right').shape[0])\nprint(\"Total de puntos representados por las manzanas: \", MANZANA_911.shape[0])\n\nTotal de puntos con claves diferentes:  265646\nTotal de puntos con claves iguales:  25358\nTotal de puntos representados por las manzanas:  291004\n\n\n\n¿Qué clave mantener? para este caso usaremos la clave de la derecha como asignacion principal y reduciremos la forma del dataframe con el numero de dimensiones a considerar para los conteos y renombramos aquellas donde sea neesario.\n\n\n## Selección de dimensiones\n\nMANZANA_911_USE = MANZANA_911[['CVEGEO_left','folio', \n                               'Categoria','Incidente' ]].rename({'CVEGEO_left':'CVEGEO'}, \n                                                                 axis = 1)\n\nMANZANA_911_USE.head()\n\n\n\n\n\n  \n    \n      \n      CVEGEO\n      folio\n      Categoria\n      Incidente\n    \n  \n  \n    \n      0\n      0901000010898031\n      C5/210103/00836\n      Disturbio\n      ESCANDALO\n    \n    \n      0\n      0901000010898031\n      C5/20211009/05576\n      Administrativas\n      EBRIO\n    \n    \n      0\n      0901000010898031\n      C5/20210828/00113\n      Disturbio\n      ESCANDALO\n    \n    \n      2\n      0901000011472068\n      C5/20210523/02237\n      Disturbio\n      FIESTA\n    \n    \n      2\n      0901000011472068\n      C5/20210410/01013\n      Administrativas\n      EBRIO\n    \n  \n\n\n\n\n\nValidamos si existen repeticiones en las manzanas y observamos que tenemos “n-1” manzanas repetidas, lo que en automatico nos hace entender que existe un numero de categorias de la dimension incidente dentro de la manzana\n\n\nEn el proceso de validación de manzanas debemos ecordar que la relación es una colonia a muchas manzanas, por lo que una manzana no debe repetirse mas de una vez)\n\n\nMANZANA_911_USE.CVEGEO.value_counts()\n\n0901700010494014    305\n0900800010512032    288\n0901600010497013    265\n090160001011A013    236\n0901500010894005    190\n                   ... \n0900700011250008      1\n090160001082A004      1\n0901600010798015      1\n0900700011496012      1\n0900400010138017      1\nName: CVEGEO, Length: 39864, dtype: int64\n\n\n\nRetomamos parte de los procesos anteriores y aplicamos un dataframe dummys para contabilizar en este caso a nivel manzana\n\n\n## Creación del dataframe Dummy\nMANZAS_911_DMY = pd.get_dummies(MANZANA_911_USE, \n                                columns = [\"Incidente\"],\n                                prefix = [\"DM\"])\n\n### Ahora que tenemos nuestro dummy podemos contar, para esto agrupamos\n\nMANZANA_911_DUMMMY = pd.DataFrame(MANZAS_911_DMY.groupby(['CVEGEO']).agg({'DM_AGUA_N': 'sum', \n                                                                           'DM_AGUA_P': 'sum',\n                                                                           'DM_BASURA_P': 'sum',\n                                                                           'DM_CORTO_ELE': 'sum',\n                                                                           'DM_DROGADO': 'sum',\n                                                                           'DM_EBRIO': 'sum',\n                                                                           'DM_ESCANDALO': 'sum',\n                                                                           'DM_FIESTA': 'sum',\n                                                                           'DM_FUGAS_N': 'sum',\n                                                                           'DM_GRAFITI': 'sum',\n                                                                           'DM_PERSO_R': 'sum',\n                                                                           'DM_VEHICULO': 'sum'\n                                                                          }).reset_index())\nMANZANA_911_DUMMMY.head(5)\n\n\n\n\n\n  \n    \n      \n      CVEGEO\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      0900200010010001\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      1\n      0900200010010002\n      0\n      1\n      0\n      0\n      0\n      1\n      4\n      1\n      0\n      0\n      0\n      0\n    \n    \n      2\n      0900200010010003\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      1\n      0\n      0\n      0\n      0\n    \n    \n      3\n      0900200010010005\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      2\n      0\n      0\n      0\n      0\n    \n    \n      4\n      0900200010010006\n      0\n      2\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n\n\n\n\nUna vez realizado lo anterior, podemos validar que las manzanas no se repiten\n\n\nMANZANA_911_DUMMMY.CVEGEO.value_counts()\n\n0900200010010001    1\n0901100111041013    1\n0901100111037022    1\n0901100111037023    1\n0901100111037024    1\n                   ..\n0900700010623021    1\n0900700010623022    1\n0900700010623023    1\n0900700010623024    1\n0901700011524025    1\nName: CVEGEO, Length: 39864, dtype: int64\n\n\n\nComo lo hicimos con anterioridad, unimos estos resulados con el frame de uso (DATA_FIN_USE) donde se alinearon las claves de colonias a manzanas con base al criterio de maxima área\n\n\n## Union de tablas por campo lave primaria \"CVEGEO\"\nSOCIAL_FISICO_POINT = DATA_FIN_USE.merge(MANZANA_911_DUMMMY,\n                                         left_on = 'CVEGEO',\n                                         right_on = 'CVEGEO',\n                                         how = 'left')\n\n\n\n5.1.7 Desorden Social y Fisico nivel colonia\n\nPara construirlo repetimos los procesos anteriores para agrupacion y aplicacion de la función. Desorden social\n\n\n### Agrupamiento de datos por nivel colonia para \"PCA\" DESORDEN SOCIAL\n\nSOC_POINT_COL = pd.DataFrame(SOCIAL_FISICO_POINT.groupby(['CVE_COL']).agg({'POBTOT':'sum',\n                                                                           'DM_DROGADO': 'sum',\n                                                                           'DM_EBRIO':'sum',\n                                                                           'DM_ESCANDALO': 'sum',\n                                                                           'DM_FIESTA':'sum',\n                                                                           'DM_BASURA_P': 'sum',\n                                                                           'DM_PERSO_R': 'sum'}).reset_index())\n\nSOCIAL_PNT_COL = CONC_DIS(SOC_POINT_COL, 'CVE_COL','POBTOT')\n\nSOCIAL_PNT_COL.head(2)\n\n\n Total de la variancia explicada \n 57.266 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DISAD\n    \n  \n  \n    \n      0\n      02-001\n      -0.813810\n    \n    \n      1\n      02-002\n      0.589982\n    \n  \n\n\n\n\n\nDesorden fisico\n\n\n### Desorden Fisico a nivel colonia\n\nFISI_POINT_COL = pd.DataFrame(SOCIAL_FISICO_POINT.groupby(['CVE_COL']).agg({'POBTOT':'sum',\n                                                                            'DM_VEHICULO': 'sum',\n                                                                            'DM_GRAFITI':'sum',\n                                                                            'DM_AGUA_P': 'sum',\n                                                                            'DM_AGUA_N':'sum',\n                                                                            'DM_CORTO_ELE': 'sum',\n                                                                            'DM_FUGAS_N': 'sum'}).reset_index())\nFISICO_PNT_COL = CONC_DIS(FISI_POINT_COL, 'CVE_COL','POBTOT')\n\nFISICO_PNT_COL.head(2)\n\n\n Total de la variancia explicada \n 31.155 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DISAD\n    \n  \n  \n    \n      0\n      02-001\n      -0.955072\n    \n    \n      1\n      02-002\n      -0.187857\n    \n  \n\n\n\n\n\n\n5.1.8 Desorden Social y Fisico nivel Alcaldia\n\nDesorden social\n\n\n### Desorden social a nivel alcaldia\n\nSOC_POINT_MUN = pd.DataFrame(SOCIAL_FISICO_POINT.groupby(['MUN']).agg({'POBTOT':'sum',\n                                                                       'DM_DROGADO': 'sum',\n                                                                       'DM_EBRIO':'sum',\n                                                                       'DM_ESCANDALO': 'sum',\n                                                                       'DM_FIESTA':'sum',\n                                                                       'DM_BASURA_P': 'sum',\n                                                                       'DM_PERSO_R': 'sum'}).reset_index())\n\nSOCIAL_PNT_MUN = CONC_DIS(SOC_POINT_MUN, 'MUN','POBTOT')\n\nSOCIAL_PNT_MUN.head(2)\n\n\n Total de la variancia explicada \n 86.8 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      DISAD\n    \n  \n  \n    \n      0\n      002\n      -0.747695\n    \n    \n      1\n      003\n      0.735993\n    \n  \n\n\n\n\n\nDesorden Fisico\n\n\n### Desorden Fisico a nivel Alcaldia\n\nFISI_POINT_MUN = pd.DataFrame(SOCIAL_FISICO_POINT.groupby(['MUN']).agg({'POBTOT':'sum',\n                                                                        'DM_VEHICULO': 'sum',\n                                                                        'DM_GRAFITI':'sum',\n                                                                        'DM_AGUA_P': 'sum',\n                                                                        'DM_AGUA_N':'sum',\n                                                                        'DM_CORTO_ELE': 'sum',\n                                                                        'DM_FUGAS_N': 'sum'}).reset_index())\nFISICO_PNT_MUN = CONC_DIS(FISI_POINT_MUN, 'MUN','POBTOT')\n\nFISICO_PNT_MUN.head(2)\n\n\n Total de la variancia explicada \n 67.796 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      DISAD\n    \n  \n  \n    \n      0\n      002\n      -0.557310\n    \n    \n      1\n      003\n      0.588662\n    \n  \n\n\n\n\n\nAhora unimos toda la informacion la tabla con las desventajas y renombramos las columnas de lo necesario en cada nivel\n\n\n### Unimos toda la información a la tabla original y renombramos las columnas de lo necesario en cada nivel\n\nMERGE_SOCIAL_POINT = MERGE_DESVENTAJAS.merge(SOCIAL_PNT_COL,\n                                             left_on = 'CVE_COL', \n                                             right_on = 'CVE_COL', \n                                             how = 'inner').merge(SOCIAL_PNT_MUN,\n                                                                  left_on ='MUN',\n                                                                  right_on = 'MUN',\n                                                                  how = 'inner').rename({\"DISAD_x\": \"SOCIAL_COL\", \n                                                                                         \"DISAD_y\": \"SOCIAL_MUN\"}, axis = 1)\n\nMERGE_FISICO_POINT = MERGE_SOCIAL_POINT.merge(FISICO_PNT_COL,\n                                              left_on = 'CVE_COL', \n                                              right_on = 'CVE_COL', \n                                              how = 'inner').merge(FISICO_PNT_MUN,\n                                                                   left_on ='MUN',\n                                                                   right_on = 'MUN',\n                                                                   how = 'inner').rename({\"DISAD_x\": \"FISICO_COL\",\n                                                                                    \"DISAD_y\": \"FISICO_MUN\"}, axis = 1)\n\nMERGE_FISICO_POINT.head(5)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      ...\n      PROM_OCUP\n      P3YM_HLI\n      P_15A24_M\n      geometry\n      DIS_COL\n      DIS_MUN\n      SOCIAL_COL\n      SOCIAL_MUN\n      FISICO_COL\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      ...\n      4.04\n      0.0\n      3.0\n      POLYGON ((-99.22982 19.35939, -99.23006 19.359...\n      -0.58736\n      0.533438\n      0.202823\n      0.868655\n      -0.130865\n      1.464524\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      ...\n      4.39\n      0.0\n      5.0\n      POLYGON ((-99.23003 19.35814, -99.23091 19.357...\n      -0.58736\n      0.533438\n      0.202823\n      0.868655\n      -0.130865\n      1.464524\n    \n    \n      2\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      ...\n      3.54\n      0.0\n      3.0\n      POLYGON ((-99.22965 19.35917, -99.22977 19.359...\n      -0.58736\n      0.533438\n      0.202823\n      0.868655\n      -0.130865\n      1.464524\n    \n    \n      3\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      ...\n      3.08\n      NaN\n      4.0\n      POLYGON ((-99.22887 19.35633, -99.22904 19.356...\n      -0.58736\n      0.533438\n      0.202823\n      0.868655\n      -0.130865\n      1.464524\n    \n    \n      4\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      ...\n      3.63\n      0.0\n      10.0\n      POLYGON ((-99.22885 19.35836, -99.22903 19.358...\n      -0.58736\n      0.533438\n      0.202823\n      0.868655\n      -0.130865\n      1.464524\n    \n  \n\n5 rows × 24 columns\n\n\n\n\nAhora si, tenemos la base como la necesitamos ahora con la bifurcacion de puntos. Solo nos queda reordenar y validar\n\n\n### Solo queda reordenar para un uso mas facil\n\nDATA_SET_FINAL_POINT = MERGE_FISICO_POINT[['ENTIDAD', 'NOM_ENT', 'MUN', 'NOM_MUN', 'LOC', 'NOM_LOC',\n                                           'ID_COL','CVE_COL', 'NOM_COL', 'AGEB', 'MZA', 'CVEGEO', \n                                           'POBTOT','DIS_COL', 'DIS_MUN', 'SOCIAL_COL', 'SOCIAL_MUN', \n                                           'FISICO_COL','FISICO_MUN', 'geometry']]\n\nDATA_SET_FINAL_POINT.head(2)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      MZA\n      CVEGEO\n      POBTOT\n      DIS_COL\n      DIS_MUN\n      SOCIAL_COL\n      SOCIAL_MUN\n      FISICO_COL\n      FISICO_MUN\n      geometry\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      031\n      0901000010898031\n      93.0\n      -0.58736\n      0.533438\n      0.202823\n      0.868655\n      -0.130865\n      1.464524\n      POLYGON ((-99.22982 19.35939, -99.23006 19.359...\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      019\n      0901000010900019\n      101.0\n      -0.58736\n      0.533438\n      0.202823\n      0.868655\n      -0.130865\n      1.464524\n      POLYGON ((-99.23003 19.35814, -99.23091 19.357...\n    \n  \n\n\n\n\n\nHacemos otro mapita :D\n\n\n### Mapitas y mas mapitas \n\nDATA_SET_FINAL_POINT.plot('SOCIAL_MUN', \n                          legend=False,\n                          alpha=0.8,\n                          scheme='NaturalBreaks',\n                          cmap='copper',\n                          classification_kwds={'k':6}, figsize=(8, 8))\nplt.title(label = 'Desorden Social nivel Alcaldia, Ciudad de México')\nplt.axis('off')\nplt.show()\n\n\n\n\n\nValidamos la información\n\n\n### validamos la informacion de las dimensiones creadas\n\nDATA_SET_FINAL_POINT.groupby(['MUN']).agg({'DIS_COL':'mean',\n                                           'DIS_MUN': 'mean',\n                                           'SOCIAL_COL':'mean',\n                                           'SOCIAL_MUN': 'mean',\n                                           'FISICO_COL':'mean',\n                                           'FISICO_MUN': 'mean'\n                                           }).reset_index()\n\n\n\n\n\n  \n    \n      \n      MUN\n      DIS_COL\n      DIS_MUN\n      SOCIAL_COL\n      SOCIAL_MUN\n      FISICO_COL\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      002\n      -0.312325\n      -0.996294\n      0.296621\n      -0.747695\n      -0.019401\n      -0.557310\n    \n    \n      1\n      003\n      -0.006193\n      -0.069455\n      0.589519\n      0.735993\n      0.488595\n      0.588662\n    \n    \n      2\n      004\n      1.106869\n      -1.304359\n      -0.047840\n      -2.958135\n      0.185149\n      -2.564519\n    \n    \n      3\n      005\n      0.565336\n      2.040898\n      0.736651\n      3.405017\n      0.472610\n      3.112129\n    \n    \n      4\n      006\n      1.201381\n      -0.650310\n      2.142924\n      -0.475565\n      1.298131\n      -0.760101\n    \n    \n      5\n      007\n      1.719481\n      5.736332\n      0.746890\n      5.601105\n      0.399379\n      4.488746\n    \n    \n      6\n      008\n      0.868157\n      -1.099762\n      1.060475\n      -2.284766\n      1.633729\n      -1.722324\n    \n    \n      7\n      009\n      4.909275\n      -1.163220\n      0.467193\n      -3.390534\n      0.099637\n      -2.940692\n    \n    \n      8\n      010\n      0.126637\n      0.533438\n      -0.016423\n      0.868655\n      0.569073\n      1.464524\n    \n    \n      9\n      011\n      1.633560\n      -0.609511\n      0.904822\n      -2.098129\n      1.112164\n      -1.533676\n    \n    \n      10\n      012\n      0.829067\n      0.688221\n      0.330175\n      0.302626\n      0.902628\n      1.025731\n    \n    \n      11\n      013\n      2.961643\n      0.183677\n      1.138957\n      -1.722297\n      0.882234\n      -1.450689\n    \n    \n      12\n      014\n      -0.000506\n      -1.302296\n      1.840254\n      -0.076218\n      1.148156\n      0.088225\n    \n    \n      13\n      015\n      1.070981\n      -0.151071\n      3.577664\n      1.966882\n      1.983134\n      2.494758\n    \n    \n      14\n      016\n      -0.491578\n      -1.227027\n      0.842559\n      -0.304295\n      0.177206\n      -1.333774\n    \n    \n      15\n      017\n      0.548961\n      -0.609259\n      2.127434\n      1.177357\n      0.872103\n      -0.399690\n    \n  \n\n\n\n\n\nSOCIAL_PNT_MUN.head(4)\n\n\n\n\n\n  \n    \n      \n      MUN\n      DISAD\n    \n  \n  \n    \n      0\n      002\n      -0.747695\n    \n    \n      1\n      003\n      0.735993\n    \n    \n      2\n      004\n      -2.958135\n    \n    \n      3\n      005\n      3.405017\n    \n  \n\n\n\n\n\n\n5.1.9 Resultados\n\nResumimos los resultados en dos tablas que nos hablan del valor de la varianza por ambos caminos de bifurcación Table 5.1\n\n\n\nTable 5.1: Resultados\n\n\n\n\n(a) Clave Manzana\n\n\nCaso 01\n\n\n\n\n\n\n\n\nColonia\nSocial\n61.258%\nFisico\n35.943%\n\n\nAlcaldia\nSocial\n76.681%\nFisico\n60.443%\n\n\n\n\n\n\n(b) Geom Point\n\n\nCaso 02\n\n\n\n\n\n\n\n\nColonia\nSocial\n57.266%\nFisico\n31.155%\n\n\nAlcaldia\nSocial\n86.8%\nFisico\n67.796%"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "data.html#desorden-social-y-fisico",
    "href": "data.html#desorden-social-y-fisico",
    "title": "2  Data Acquisition and Preprocessing",
    "section": "5.1 Desorden social y fisico",
    "text": "5.1 Desorden social y fisico\n\nEn esta seccion para calcular los valores de desorden social y fisico, nos centraremos en usar la información de la columna “manzana” de las llamadas para unir con la base donde de desventajas y tener la informacion a nivel Alcaldia.\n\n\n5.1.1 Corrección columna clave de manzana\n\nLas claves de manzanas que se encuentran asignadas necesitan un procedo de corrección y limpieza.\n\n\nInicialmente el tipo de dato es string esta en su forma es cientifico,\nTenemos que transformar los string a numeros aplicando la funcion “to_numeric”\nSe extiende el número de su forma cientifica a su forma natural\nLos elementos con caracteres alfanumericos se asignan como “NAN”.\n\n\nEn este punto podemos notar que ya tenemos el string cientifico en “float”, lo que tenemos que hacer es extraer el numero sin notación cientifica, para eso aplicamos una funcion “lamnda” que convierta el float en string sin notación cientifica y los “nan_text” sean remplazamos por “NAN” verdaderos.\n\n\n\n\n\n\n\nImpotante\n\n\n\nRecordar que las claves comienzan con un cero y que el total de caracteres para manzanas son 16.\nCVEGEO = “0900700000000000”\n\n\n\n## Transformación de string to float \nManza_Num = pd.DataFrame(pd.to_numeric(All_Data['manzana'], errors = 'coerce'))\n\n## Se extiende el numero a su forma natural\nManza_Num = pd.DataFrame(Manza_Num['manzana'].apply(lambda x: '%.0f' %x)).replace('nan', np.nan)\n\n### Recordando que las claves comienzan con un cero y que para manzanas es un total de 16 caracteres\n### Asignamos el cero\n\nManza_Num['manzana'] = Manza_Num['manzana'].str.zfill(16)\n\nManza_Num.shape\n\n(301784, 1)\n\n\n\nYa tenemos un dataframe con las claves en string y los indices como campo llave primaria con NAN verdaderos\n\n\nAhora vamos a hacer una union entre estos resultados y los el dataframe filtrado (All_Data_filtered) con base a su indice. Al ser un merge por indices, es recomendable que este este reiniciado (por lo que se entiende la necesidad de su reinicio en procesos anteriores).\n\n\nDe la union tendremos dos columnas con claves manzanas, las cuales las usaremos en una función para asignnación de clave corregida\n\n\n### Union entre tablas\nUSO_MANZAS = All_Data.merge(Manza_Num,\n                            left_index = True,\n                            right_index = True)\nUSO_MANZAS.head(3)                                   \n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      manzana_x\n      latitud\n      longitud\n      manzana_y\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      9.007E+14\n      19.368088\n      -99.132832\n      0900700000000000\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      9.007E+14\n      19.354583\n      -99.061529\n      0900700000000000\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      FIESTA\n      9.003E+14\n      19.332512\n      -99.175247\n      0900300000000000\n    \n  \n\n\n\n\n\nLa asignacion de clave correcta: se lleva a cabo considerando las combianciones de resultados posibles entre las dos columnas de nombre manzanas (x,y). De lo anterior se obtienen las siguientes reglas de negocios:\n\n\nSi manzana_x == manzana_x & manzana_y == manzana_y, entonces el valor sera manzana_y\nSi manzana_x == manzana_x & manzana_y != manzana_y, entonces el valor sera manzana_x\nSi ninguno de los dos anteriores se cumple se asigna NAN\n\n\nCon base a las reglas se configura la función:\n\n\n### Creamos una función\ndef manzan_a(C):\n    if ((C.manzana_x == C.manzana_x) & (C.manzana_y == C.manzana_y)):\n        return C.manzana_y\n    elif ((C.manzana_x == C.manzana_x) & (C.manzana_y != C.manzana_y)):\n        return C.manzana_x\n    else:\n        return np.nan\n\n\nSe aplica la funcion y se eliminan las dimensiones no necesarias\n\n\n### Aplicamos la función\nUSO_MANZAS['CVEGEO'] = USO_MANZAS.apply(manzan_a, axis = 1)\n\n## Eliminamos las dimensiones no necesarias y tenemos la tabla de inicio\n\nUSO_MANZAS = USO_MANZAS.drop(['manzana_x', 'manzana_y'], axis = 1)\n\nUSO_MANZAS.head(3)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      latitud\n      longitud\n      CVEGEO\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      19.368088\n      -99.132832\n      0900700000000000\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      19.354583\n      -99.061529\n      0900700000000000\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      FIESTA\n      19.332512\n      -99.175247\n      0900300000000000\n    \n  \n\n\n\n\n\n\n5.1.2 Conteo de eventos\n\nAhora vamos a contar los eventos de una determinada clase en el tipo de incidentes estan inmersos en las manzanas. Para la forma con columna y claves manzanas, seleccionamos unicamente las columnas de trabajo, en este caso se eliminan longitud y latitud.\n\n\nPara contabilizar las clases en la columna haremos uso de un dataframe dummy\n\n\n### Se eliminan columnas no necesarias\n### Para contabilizar, notamos que la descripcion del incidente esta en fila,\n### por lo que tenemos que crear un dataframe dummy\n\nUSO_MANZAS_DMY = pd.get_dummies(USO_MANZAS.drop(['latitud','longitud'], axis = 1), \n                                     columns=[\"Incidente\"], \n                                     prefix=[\"DM\"])\n\nUSO_MANZAS_DMY.head(3)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      CVEGEO\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      0900700000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      0900700000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      0900300000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n  \n\n\n\n\n\nAhora que tenemos nuestro dataframe dummy podemos contar los elementos de cada clase en las manzanas, para eso agrupamos y sumamos\n\n\n### Agrupación de dataframe Dummy\n\nMANZANA_DUMMMY = pd.DataFrame(USO_MANZAS_DMY.groupby(['CVEGEO']).agg({'DM_AGUA_N': 'sum', \n                                                                      'DM_AGUA_P': 'sum',\n                                                                      'DM_BASURA_P': 'sum',\n                                                                      'DM_CORTO_ELE': 'sum',\n                                                                      'DM_DROGADO': 'sum',\n                                                                      'DM_EBRIO': 'sum',\n                                                                      'DM_ESCANDALO': 'sum',\n                                                                      'DM_FIESTA': 'sum',\n                                                                      'DM_FUGAS_N': 'sum',\n                                                                      'DM_GRAFITI': 'sum',\n                                                                      'DM_PERSO_R': 'sum',\n                                                                      'DM_VEHICULO': 'sum'\n                                                                      }).reset_index())\nMANZANA_DUMMMY.head(3)                                                           \n\n\n\n\n\n  \n    \n      \n      CVEGEO\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      0900000000000000\n      202.0\n      1684.0\n      190.0\n      4\n      1660.0\n      9917.0\n      8109.0\n      5349.0\n      11\n      94.0\n      439.0\n      971.0\n    \n    \n      1\n      0900200000000000\n      4.0\n      102.0\n      8.0\n      0\n      170.0\n      841.0\n      994.0\n      1353.0\n      0\n      7.0\n      15.0\n      95.0\n    \n    \n      2\n      090020001003A003\n      0.0\n      0.0\n      0.0\n      0\n      0.0\n      0.0\n      2.0\n      0.0\n      0\n      0.0\n      0.0\n      0.0\n    \n  \n\n\n\n\n\nSe une la tabla y seleccionamos aquellos elementos para crear el Desorden Social y fisico. Se unen la tabla DATA_FIN_USE y MANZANA_DUMMMY. Esto se hace en esa tabla porque debemos recordar que las manzanas tienen su asignacion de clave alcaldias.\n\n\n### Union de tablas \nSOCIAL_FISICO = DATA_FIN_USE.merge(MANZANA_DUMMMY,\n                                   left_on = 'CVEGEO',\n                                   right_on = 'CVEGEO',\n                                   how = 'left')\nSOCIAL_FISICO.head(2)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      ...\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n2 rows × 31 columns\n\n\n\n\n\n5.1.3 Desorden Social y Fisico a nivel Alcaldia\n\nDe la misma forma que se ejecuto codigo pasado, lo que necesitamos es el grupamiento de datos por nivel alcaldia para calcular la componente de Desorden Social por “PCA”\n\n\nDesorden Social\n\n\n### Agrupamiento de datos por nivel Alcaldia para \"PCA\" DESORDEN SOCIAL\n\nSOCIAL_ALPCA = pd.DataFrame(SOCIAL_FISICO.groupby(['MUN']).agg({'DM_DROGADO': 'sum',\n                                                                'DM_EBRIO':'sum',\n                                                                'DM_ESCANDALO': 'sum',\n                                                                'DM_FIESTA':'sum',\n                                                                'DM_BASURA_P': 'sum',\n                                                                'DM_PERSO_R': 'sum'}).reset_index())\n\nSOCIAL_ALCAL = CONC_DIS(SOCIAL_ALPCA, 'MUN', 'SOCIAL_MUN')\nSOCIAL_ALCAL.head(2)\n\n\n Total de la variancia explicada por la componente \n 76.681 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      SOCIAL_MUN\n    \n  \n  \n    \n      0\n      002\n      -0.108228\n    \n    \n      1\n      003\n      1.059589\n    \n  \n\n\n\n\n\nDesorden Físico\n\n\n### Agrupamiento de datos por nivel Alcaldia para \"PCA\" DESORDEN FISICO\n\nFISICO_ALPCA = pd.DataFrame(SOCIAL_FISICO.groupby(['MUN']).agg({'DM_VEHICULO': 'sum',\n                                                                'DM_GRAFITI':'sum',\n                                                                'DM_AGUA_P': 'sum',\n                                                                'DM_AGUA_N':'sum',\n                                                                'DM_CORTO_ELE': 'sum',\n                                                                'DM_FUGAS_N': 'sum'}).reset_index())\n\nFISICO_ALCAL = CONC_DIS(FISICO_ALPCA, 'MUN','FISICO_MUN')\nFISICO_ALCAL.head(2)\n\n\n Total de la variancia explicada por la componente \n 60.443 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      002\n      -1.863468\n    \n    \n      1\n      003\n      0.573604\n    \n  \n\n\n\n\n\nAhora se unen los resultados de la concentración de desventajas con los resultados del desorden social y físico\n\n\n### Union Desventajas + Desorden Social y Fisico\n\nDESVE_ALCA = DESVE_ALCA.merge(SOCIAL_ALCAL, \n                              left_on = 'MUN', \n                              right_on = 'MUN', \n                              how = 'inner').merge(FISICO_ALCAL,\n                                                   left_on = 'MUN',\n                                                   right_on = 'MUN',\n                                                   how = 'inner')\nDESVE_ALCA                             \n\n\n\n\n\n  \n    \n      \n      MUN\n      DIS_MUN\n      SOCIAL_MUN\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      002\n      -0.996294\n      -0.108228\n      -1.863468\n    \n    \n      1\n      003\n      -0.069455\n      1.059589\n      0.573604\n    \n    \n      2\n      004\n      -1.304359\n      -2.826147\n      -2.381901\n    \n    \n      3\n      005\n      2.040898\n      2.975016\n      3.574120\n    \n    \n      4\n      006\n      -0.650310\n      0.204031\n      -0.687370\n    \n    \n      5\n      007\n      5.736332\n      4.864047\n      2.623189\n    \n    \n      6\n      008\n      -1.099762\n      -2.475364\n      -1.962040\n    \n    \n      7\n      009\n      -1.163220\n      -3.290602\n      -2.487223\n    \n    \n      8\n      010\n      0.533438\n      1.033927\n      0.873328\n    \n    \n      9\n      011\n      -0.609511\n      -1.867119\n      -0.548826\n    \n    \n      10\n      012\n      0.688221\n      -0.280469\n      2.281060\n    \n    \n      11\n      013\n      0.183677\n      -2.229841\n      -1.260814\n    \n    \n      12\n      014\n      -1.302296\n      -0.326258\n      -0.580746\n    \n    \n      13\n      015\n      -0.151071\n      1.979941\n      3.063466\n    \n    \n      14\n      016\n      -1.227027\n      1.155803\n      -0.424593\n    \n    \n      15\n      017\n      -0.609259\n      0.131673\n      -0.791786\n    \n  \n\n\n\n\n\n\n5.1.4 Desorden Social y Fisico a nivel Colonia\n\nPara este caso y al contar con la geometria de las colonias previamente usada, contaremos el total de eventos de cada una de las clases en las colonias. Para eso necesitamos inicialmente que nuestra base de datos sea espacializada, es decir que cuente con una columna de geometria espacial\n\n\n\n5.1.5 Caso por Mananzas y Puntos Geom\n\nComenzamos usando la tabla que habiamos creado con anterioridad, aquella donde se hicieron las correciones a la clave manzanada (USO_MANZAS). De la tabla se crean las geometrias las cuales necesitan tener definido un sistema de proyección.\n\n\nComo notamos en los datos, el sistema de coordendas se encuentra en longitud / latitud, por lo que se asigna una proyeccion geografica wgs84 con epsg 4326\n\n\nUSO_MANZAS = gpd.GeoDataFrame(USO_MANZAS,\n                             geometry = gpd.points_from_xy(USO_MANZAS.longitud,\n                                                           USO_MANZAS.latitud), crs=4326).drop(['latitud','longitud'], axis = 1).to_crs(6362)\nUSO_MANZAS.head(2)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      CVEGEO\n      geometry\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      0900700000000000\n      POINT (2800344.195 821939.006)\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      0900700000000000\n      POINT (2807842.900 820599.774)\n    \n  \n\n\n\n\n\nValidamos que ambos se encuentren en el mismo sistema de coordenadas (por si algo no tenemos bien, mejor validar)\n\n\nprint (USO_MANZAS.crs)\nprint (COLONIAS_CDMX.crs)\n\nepsg:6362\nepsg:6362\n\n\n\nAhora se van a contabilizar el número de clases de geometria punto dentro de las colonias de geometria poligonal, para que eso suceda, debemos hacer un join geoespacial.\n\n\n\n5.1.6 Contabilizando los puntos dentro de poligonos\n\n### Hacemos un join geoespacial de los puntos que se encuentran contenidos dentro del poligono\n\nMANZANA_911 = gpd.sjoin(COLONIAS_CDMX, \n                        USO_MANZAS[['folio', 'Categoria', \n                                       'Incidente',\n                                       'geometry']], \n                         how = \"left\", \n                         op = 'contains').rename({'CVEUT':'CVE_COL'}, axis = 1)\nMANZANA_911.head(2)\n\n\n\n\n\n  \n    \n      \n      ENT\n      CVEDT\n      NOMDT\n      DTTOLOC\n      CVE_COL\n      NOMUT\n      ID\n      geometry\n      index_right\n      folio\n      Categoria\n      Incidente\n    \n  \n  \n    \n      0\n      9\n      2\n      AZCAPOTZALCO\n      05\n      02-001\n      AGUILERA\n      1\n      POLYGON ((2797370.839 833543.566, 2797391.142 ...\n      246882.0\n      C5/20211016/00159\n      Disturbio\n      ESCANDALO\n    \n    \n      0\n      9\n      2\n      AZCAPOTZALCO\n      05\n      02-001\n      AGUILERA\n      1\n      POLYGON ((2797370.839 833543.566, 2797391.142 ...\n      256451.0\n      C5/20211016/00110\n      Disturbio\n      FIESTA\n    \n  \n\n\n\n\n\nRetomamos parte de los procesos anteriores y aplicamos un dataframe dummys para contabilizar en este caso a nivel manzana\n\n\n## Creación del dataframe Dummy\nMANZAS_911_DMY = pd.get_dummies(MANZANA_911, \n                                columns = [\"Incidente\"],\n                                prefix = [\"DM\"])\n\n### Ahora que tenemos nuestro dummy podemos contar, para esto agrupamos\n\nMANZANA_911_DUMMMY = pd.DataFrame(MANZAS_911_DMY.groupby(['CVE_COL']).agg({'DM_AGUA_N': 'sum', \n                                                                           'DM_AGUA_P': 'sum',\n                                                                           'DM_BASURA_P': 'sum',\n                                                                           'DM_CORTO_ELE': 'sum',\n                                                                           'DM_DROGADO': 'sum',\n                                                                           'DM_EBRIO': 'sum',\n                                                                           'DM_ESCANDALO': 'sum',\n                                                                           'DM_FIESTA': 'sum',\n                                                                           'DM_FUGAS_N': 'sum',\n                                                                           'DM_GRAFITI': 'sum',\n                                                                           'DM_PERSO_R': 'sum',\n                                                                           'DM_VEHICULO': 'sum'\n                                                                          }).reset_index())\nMANZANA_911_DUMMMY.head(5)\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      02-001\n      0\n      4\n      1\n      0\n      9.0\n      21.0\n      27.0\n      14\n      0\n      0\n      1\n      1\n    \n    \n      1\n      02-002\n      4\n      7\n      0\n      0\n      16.0\n      77.0\n      67.0\n      52\n      0\n      0\n      2\n      3\n    \n    \n      2\n      02-003\n      0\n      3\n      0\n      0\n      2.0\n      18.0\n      11.0\n      10\n      0\n      0\n      0\n      1\n    \n    \n      3\n      02-005\n      0\n      0\n      0\n      0\n      3.0\n      13.0\n      21.0\n      13\n      0\n      1\n      6\n      3\n    \n    \n      4\n      02-006\n      1\n      1\n      0\n      0\n      22.0\n      78.0\n      66.0\n      56\n      0\n      0\n      5\n      7\n    \n  \n\n\n\n\n\nUna vez realizado lo anterior, podemos validar que las manzanas no se repiten\n\n\nMANZANA_911_DUMMMY.CVE_COL.value_counts()\n\n02-001    1\n10-250    1\n11-018    1\n11-017    1\n11-016    1\n         ..\n07-007    1\n07-006    1\n07-005    1\n07-004    1\n17-086    1\nName: CVE_COL, Length: 1814, dtype: int64\n\n\n\n\n5.1.7 Calculo de indices\n\nPara construirlo repetimos los procesos anteriores para agrupacion y aplicacion de la función.\n\n\n### Agrupamiento de datos por nivel colonia para \"PCA\" DESORDEN SOCIAL\n\nSOC_POINT_COL = pd.DataFrame(MANZANA_911_DUMMMY.groupby(['CVE_COL']).agg({'DM_DROGADO': 'sum',\n                                                                           'DM_EBRIO':'sum',\n                                                                           'DM_ESCANDALO': 'sum',\n                                                                           'DM_FIESTA':'sum',\n                                                                           'DM_BASURA_P': 'sum',\n                                                                           'DM_PERSO_R': 'sum'}).reset_index())\n\nSOCIAL_PNT_COL = CONC_DIS(SOC_POINT_COL, 'CVE_COL','SOCIAL_COL')\n\nSOCIAL_PNT_COL.head(2)\n\n\n Total de la variancia explicada por la componente \n 56.94 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      SOCIAL_COL\n    \n  \n  \n    \n      0\n      02-001\n      -0.850950\n    \n    \n      1\n      02-002\n      0.679359\n    \n  \n\n\n\n\n\nDesorden fisico\n\n\n### Desorden Fisico a nivel colonia\n\nFISI_POINT_COL = pd.DataFrame(MANZANA_911_DUMMMY.groupby(['CVE_COL']).agg({'DM_VEHICULO': 'sum',\n                                                                           'DM_GRAFITI':'sum',\n                                                                           'DM_AGUA_P': 'sum',\n                                                                           'DM_AGUA_N':'sum',\n                                                                           'DM_CORTO_ELE': 'sum',\n                                                                           'DM_FUGAS_N': 'sum'}).reset_index())\nFISICO_PNT_COL = CONC_DIS(FISI_POINT_COL, 'CVE_COL','FISICO_COL')\n\nFISICO_PNT_COL.head(2)\n\n\n Total de la variancia explicada por la componente \n 31.445 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      FISICO_COL\n    \n  \n  \n    \n      0\n      02-001\n      -0.978118\n    \n    \n      1\n      02-002\n      -0.159875\n    \n  \n\n\n\n\n\nAhora se unen los resultados de la concentración de desventajas con los resultados del desorden social y físico\n\n\n### Union Desventajas + Desorden Social y Fisico\n\nDESVE_COL = DESVE_COL.merge(SOCIAL_PNT_COL, \n                            left_on = 'CVE_COL', \n                            right_on = 'CVE_COL', \n                            how = 'inner').merge(FISICO_PNT_COL,\n                                                   left_on = 'CVE_COL',\n                                                   right_on = 'CVE_COL',\n                                                   how = 'inner')\nDESVE_COL                             \n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DIS_COL\n      SOCIAL_COL\n      FISICO_COL\n    \n  \n  \n    \n      0\n      02-001\n      -1.121714\n      -0.850950\n      -0.978118\n    \n    \n      1\n      02-002\n      -0.533961\n      0.679359\n      -0.159875\n    \n    \n      2\n      02-003\n      -1.193403\n      -1.380046\n      -1.018299\n    \n    \n      3\n      02-005\n      -1.175400\n      -0.935409\n      -0.580366\n    \n    \n      4\n      02-006\n      -0.459954\n      1.067722\n      -0.455032\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1792\n      17-082\n      1.378785\n      2.549871\n      1.460434\n    \n    \n      1793\n      17-083\n      4.868703\n      4.772759\n      4.023627\n    \n    \n      1794\n      17-084\n      4.937573\n      4.298375\n      2.267321\n    \n    \n      1795\n      17-085\n      -0.184246\n      1.327181\n      1.125787\n    \n    \n      1796\n      17-086\n      0.207799\n      4.602840\n      1.469439\n    \n  \n\n1797 rows × 4 columns\n\n\n\n\nLas base de datos finales son:\n\n\n#### Información a nivel Colonia : Concentración de desventajas + Desorden Social + Desorden Físico\n\nDESVE_COL.head(5)\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DIS_COL\n      SOCIAL_COL\n      FISICO_COL\n    \n  \n  \n    \n      0\n      02-001\n      -1.121714\n      -0.850950\n      -0.978118\n    \n    \n      1\n      02-002\n      -0.533961\n      0.679359\n      -0.159875\n    \n    \n      2\n      02-003\n      -1.193403\n      -1.380046\n      -1.018299\n    \n    \n      3\n      02-005\n      -1.175400\n      -0.935409\n      -0.580366\n    \n    \n      4\n      02-006\n      -0.459954\n      1.067722\n      -0.455032\n    \n  \n\n\n\n\n\n#### Información a nivel Alcaldia : Concentración de desventajas + Desorden Social + Desorden Físico.\n\nDESVE_ALCA.head(5)\n\n\n\n\n\n  \n    \n      \n      MUN\n      DIS_MUN\n      SOCIAL_MUN\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      002\n      -0.996294\n      -0.108228\n      -1.863468\n    \n    \n      1\n      003\n      -0.069455\n      1.059589\n      0.573604\n    \n    \n      2\n      004\n      -1.304359\n      -2.826147\n      -2.381901\n    \n    \n      3\n      005\n      2.040898\n      2.975016\n      3.574120\n    \n    \n      4\n      006\n      -0.650310\n      0.204031\n      -0.687370"
  },
  {
    "objectID": "data.html#análisis-de-componentes-principales-pca",
    "href": "data.html#análisis-de-componentes-principales-pca",
    "title": "2  Data Acquisition and Preprocessing",
    "section": "4.2 Análisis de Componentes Principales (PCA)",
    "text": "4.2 Análisis de Componentes Principales (PCA)\n\nEn esta sección se cálcula el indice de Concetración de desventajas mediante la reducción de las dimensiónes por componentes principales (PCA). Esto se hace a nivel Alcaldias y Delegaciones. La información a nivel alcaldia y delegacion es un proceso de reagrupacion y nuevos calculos de los valores.\n\n\n\n\n\n\n\nImpotante\n\n\n\nPara que componentes principales tenga un alto rendimiento la información sdebe estar normalizada por Z-SCORE (StandardScaler)\n\\[ Z = \\frac{x - \\mu}{\\sigma} \\]\n\n\n\nPara calcular la componente principal se ha creado una funcion que encapsula los siguientes procesos: 1. Seleccion de las dimensiones con las que se calcula el indice 2. Se normaliza la informacion por Z-Score 3. Se determina el número de componentes a reducir la información 4. Se calcula la varianza total por respecto al numero de componentes 5. Se indexan los resultados a la base de datos como una nueva columna con un nombre de clave\n\n\ndef CONC_DIS (TABLA, DIM_CLAVE, PCA_NAME):\n    \n    ### Seleccion de las dimensiones con las que se calcula el indice de desventajas \"PSINDER; PROM_OCUP; P3YM_HLI; P_15A24_M\"\n     \n    PCA_X = TABLA.drop([DIM_CLAVE], axis = 1)\n    PCA_y = TABLA[[DIM_CLAVE]]\n    \n    ### Se normaliza la informacion por Z-Score\n    \n    S_TRANSF = StandardScaler()\n    PCA_X_SCALER = pd.DataFrame( S_TRANSF.fit_transform(PCA_X), \n                                 columns = PCA_X.columns)\n                                 \n    ### Se determina el número de componentes\n    \n    PCA_N = PCA(n_components = 1)\n    PCA_COMPONENTE = PCA_N.fit_transform(PCA_X_SCALER)\n    \n    ### Se calcula la varianza total por respecto al numero de componentes\n     \n    VARIANZA_TOTA = PCA_N.explained_variance_ratio_.sum() * 100\n\n    print(\"\\n Total de la variancia explicada por la componente \\n\", round(VARIANZA_TOTA,3), \"%\")\n    \n    ### Se indexan los resultados a la base de datos como una nueva columna con clave DIS_COL = concentrated disadvantage component \n    \n    TABLA[PCA_NAME] = PCA_COMPONENTE\n\n    TABLA = TABLA[[DIM_CLAVE, PCA_NAME]]\n\n    return (TABLA)\n\n\n4.2.1 Nivel Colonias\n\nPara este punto agrupamos los datos por nivel colonia para extraer el valor del índice por “PCA”\n\n\nCOLONIA_PCA = pd.DataFrame(DATA_FIN_USE.groupby(['CVE_COL']).agg({'PSINDER':'sum',\n                                                                  'PROM_OCUP': 'mean',\n                                                                  'P3YM_HLI':'sum',\n                                                                  'P_15A24_M': 'sum'}).reset_index())\nCOLONIA_PCA.head(2)\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      PSINDER\n      PROM_OCUP\n      P3YM_HLI\n      P_15A24_M\n    \n  \n  \n    \n      0\n      02-001\n      496.0\n      2.907000\n      7.0\n      138.0\n    \n    \n      1\n      02-002\n      813.0\n      3.282381\n      43.0\n      219.0\n    \n  \n\n\n\n\n\nUsamos la función creada en los datos para obtener los resultados.\n\n\n### Revalidación de información\nDESVE_COL = CONC_DIS (COLONIA_PCA, 'CVE_COL', 'DIS_COL')\nDESVE_COL.head(2)\n\n\n Total de la variancia explicada por la componente \n 66.816 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DIS_COL\n    \n  \n  \n    \n      0\n      02-001\n      -1.121714\n    \n    \n      1\n      02-002\n      -0.533961\n    \n  \n\n\n\n\n\n\n4.2.2 Nivel Alcaldias\n\nEl Agrupamiento de datos por nivel Alcaldia para “PCA”. Recordando que la clave de Alcaldia == Municipio la podemos observar de la forma: DATA_FIN_USE.NOM_MUN.value_counts()\n\n\nALCALDIA_PCA = pd.DataFrame(DATA_FIN_USE.groupby(['MUN']).agg({'PSINDER':'sum',\n                                                               'PROM_OCUP': 'mean',\n                                                               'P3YM_HLI':'sum',\n                                                               'P_15A24_M': 'sum'}).reset_index())\nALCALDIA_PCA.head(2)\n\n\n\n\n\n  \n    \n      \n      MUN\n      PSINDER\n      PROM_OCUP\n      P3YM_HLI\n      P_15A24_M\n    \n  \n  \n    \n      0\n      002\n      90063.0\n      3.005215\n      2139.0\n      27478.0\n    \n    \n      1\n      003\n      160637.0\n      2.866638\n      6103.0\n      39714.0\n    \n  \n\n\n\n\n\nAplicamos la funcion creada para obtener los resultados a nivel alcaldia\n\n\n### Aplicando la función creada arriba\n\nDESVE_ALCA = CONC_DIS (ALCALDIA_PCA, 'MUN','DIS_MUN')\nDESVE_ALCA.head(2)\n\n\n Total de la variancia explicada por la componente \n 74.241 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      DIS_MUN\n    \n  \n  \n    \n      0\n      002\n      -0.996294\n    \n    \n      1\n      003\n      -0.069455\n    \n  \n\n\n\n\n\nEn este punto, podemos unir toda la información a la tabla original y hacer unos mapas para ver como se veria la distribución a nivel colonia y alcaldia\n\n\nDATA_FIN_USE = DATA_FIN_USE.merge(DESVE_COL, ##### NO NECESITO MAS COPIAS :´(\n                                       left_on = 'CVE_COL', \n                                       right_on = 'CVE_COL', \n                                       how = 'inner').merge(DESVE_ALCA, \n                                                            left_on ='MUN', \n                                                            right_on = 'MUN' , \n                                                            how = 'inner')\n\nDATA_FIN_USE.head(2)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      MZA\n      CVEGEO\n      PSINDER\n      PROM_OCUP\n      P3YM_HLI\n      P_15A24_M\n      geometry\n      DIS_COL\n      DIS_MUN\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      031\n      0901000010898031\n      16.0\n      4.04\n      0.0\n      3.0\n      POLYGON ((-99.22982 19.35939, -99.23006 19.359...\n      -0.58736\n      0.533438\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      019\n      0901000010900019\n      46.0\n      4.39\n      0.0\n      5.0\n      POLYGON ((-99.23003 19.35814, -99.23091 19.357...\n      -0.58736\n      0.533438\n    \n  \n\n\n\n\n\nHacemos unos mapas de Concentración de desventajas a nivel Colonia y Alcaldia\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\nax = DATA_FIN_USE.plot(ax = ax, column='DIS_COL',\n                            legend= True,\n                            alpha=0.8,\n                            scheme='NaturalBreaks',\n                            cmap='copper',\n                            classification_kwds={'k':6})\nax.set(title='Desventajas a nivel Colonia, Ciudad de México')\n\nax.set_axis_off()\n\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\nax = DATA_FIN_USE.plot(ax = ax, column='DIS_MUN',\n                            legend= True,\n                            alpha=0.8,\n                            scheme='NaturalBreaks',\n                            cmap='copper',\n                            classification_kwds={'k':6})\nax.set(title='Desventajas a nivel Alcaldias, Ciudad de México')\n\nax.set_axis_off()\n\nplt.show()"
  },
  {
    "objectID": "data.html#índice-del-desorden-social-y-físico",
    "href": "data.html#índice-del-desorden-social-y-físico",
    "title": "2  Data Acquisition and Preprocessing",
    "section": "4.3 Índice del Desorden Social y Físico",
    "text": "4.3 Índice del Desorden Social y Físico\n\nEn esta seccion se usaran las llamadas del 911 para crear los índices de desorden social y desorden fisico comprendidas en dos semestres, para este caso se han usado las llamadas del primer y segundo semestre del 2021.\n\n\nLas dimensiones que se han de usar son las siguientes\n\n\n\n\nDesorden Social \n\n\nClave\nDescripción\n\n\n\n\nIntoxicación pública con drogas\nAdministrativas-Drogados\n\n\nIntoxicación pública con alcohol\nAdministrativas-Ebrios\n\n\nIncidencia pública\nNA\n\n\nOrinar en público\nNA\n\n\nDenuncia de persona en riesgo\nDenuncia-Persona en Riesgo\n\n\nDisturbios públicos escándalo callejero\nDisturbio-Escándalo\n\n\nDisturbios públicos fiestas ruidosas\nDisturbio-Escándalo\n\n\nTirar basura\nAdministrativas-Tirar Basura en Vía Pública\n\n\n\n\n\n\n\n\nDesorden Físico \n\n\nClave\nDescripción\n\n\n\n\nVehículo abandonado con placas\nAbandono-Vehículo\n\n\nGraffiti\nAdministrativas-Grafitis\n\n\nFuga de agua potable\nDerrame o Fuga-Agua Potable\n\n\nDerrame de aguas residuales\nDerrame o Fuga-Aguas Negras\n\n\nLíneas eléctricas caídas\nServicios-Corto Circuito instalación o subestación eléctrica\n\n\nFugas de gas\nDerrame o Fuga-Gas Natural\n\n\n\n\n\n\nSe cargan las bases de datos correspondientes a los semestres del añp 2021 y se concatenan a un solo dataframe para tener todos los meses\n\n\n### Llamadas del 911 \nLL_911_s1 =  pd.read_csv(Entradas + 'llamadas_911_2021_s1.csv', encoding = 'Latin-1')\nLL_911_s2 =  pd.read_csv(Entradas + 'llamadas_911_2021_s2.csv', encoding = 'Latin-1')\n\n### Concatenaciones de semestres\nFrame_C = [LL_911_s1, LL_911_s2]\nAll_Data = pd.concat(Frame_C)\n\n\nValidamos que se encuentren los doce meses en la columna “mes_cierre”. En este punto surgen dudas, ¿se eliminan los folios repetidos o se mantienen?\n\n\n### Validación de meses\nAll_Data.mes_cierre.value_counts()\n\nMarzo         117554\nSeptiembre    113749\nAbril         112352\nEnero         111484\nMayo          110801\nOctubre       109590\nAgosto        104439\nDiciembre     104276\nJulio         103319\nFebrero       102057\nJunio          96030\nNoviembre      95324\nName: mes_cierre, dtype: int64\n\n\n\nCon la validación de la información, seleccionamos unicamente de la dimension “incidente_c4” las clases con las que trabajaremos. De igual manera, se simplifica la descripción de las clases, se resetea el index para comenzar desde cero, seleccionamos unicamente las dimensiones que usaremos para los demas procesos (folio, categoria_incidente_c4, incidente_c4, manzana, latitud, longitud) y renombramos los campos necesarios.\n\n\n### Seleeción los valores de la dimension como una lista\nLista = [\"Drogados\", \"Ebrios\" , \"Persona en riesgo\", \"Escandalo\", \"Fiestas\" , \"Tirar basura en via publica\",\n         \"Vehiculo\", \"Grafitis\", \"Agua potable\", \"Aguas negras\", \"Corto circuito instalacion o subestacion electrica\", \"Fuga de gas natural\"]\n\nAll_Data = All_Data[All_Data['incidente_c4'].isin(Lista)]\n\nAll_Data = All_Data.replace({'Fiestas':'FIESTA','Escandalo':'ESCANDALO','Ebrios':'EBRIO',\n                                              'Agua potable':'AGUA_P','Drogados':'DROGADO','Vehiculo':'VEHICULO',\n                                              'Grafitis':'GRAFITI','Persona en riesgo':'PERSO_R',\n                                              'Aguas negras':'AGUA_N', 'Tirar basura en via publica':'BASURA_P',\n                                              'Corto circuito instalacion o subestacion electrica':'CORTO_ELE',\n                                              'Fuga de gas natural':'FUGAS_N'}).reset_index(drop = True)\n\nAll_Data = All_Data[[\"folio\",\"categoria_incidente_c4\",\"incidente_c4\", \n                     \"manzana\",\"latitud\",\"longitud\"]].rename({\"categoria_incidente_c4\": \"Categoria\",\n                                                              \"incidente_c4\": \"Incidente\"}, axis = 1)\n\nAll_Data.head(2)                                                            \n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      manzana\n      latitud\n      longitud\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      9.007E+14\n      19.368088\n      -99.132832\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      9.007E+14\n      19.354583\n      -99.061529\n    \n  \n\n\n\n\n\nEn esta seccion para calcular los valores de desorden social y fisico, nos centraremos en usar la información de la columna “manzana” de las llamadas para unir con la base donde de desventajas y tener la informacion a nivel Alcaldia.\n\nCorrección de la columna clave de manzana\n\nLas claves de manzanas que se encuentran asignadas necesitan un procedo de corrección y limpieza.\n\n\nInicialmente el tipo de dato es string esta en su forma es cientifico,\nTenemos que transformar los string a numeros aplicando la funcion “to_numeric”\nSe extiende el número de su forma cientifica a su forma natural\nLos elementos con caracteres alfanumericos se asignan como “NAN”.\n\n\nEn este punto podemos notar que ya tenemos el string cientifico en “float”, lo que tenemos que hacer es extraer el numero sin notación cientifica, para eso aplicamos una funcion “lamnda” que convierta el float en string sin notación cientifica y los “nan_text” sean remplazamos por “NAN” verdaderos.\n\n\n\n\n\n\n\nImpotante\n\n\n\nRecordar que las claves comienzan con un cero y que el total de caracteres para manzanas son 16.\nCVEGEO = “0900700000000000”\n\n\n\n## Transformación de string to float \nManza_Num = pd.DataFrame(pd.to_numeric(All_Data['manzana'], errors = 'coerce'))\n\n## Se extiende el numero a su forma natural\nManza_Num = pd.DataFrame(Manza_Num['manzana'].apply(lambda x: '%.0f' %x)).replace('nan', np.nan)\n\n### Recordando que las claves comienzan con un cero y que para manzanas es un total de 16 caracteres\n### Asignamos el cero\n\nManza_Num['manzana'] = Manza_Num['manzana'].str.zfill(16)\n\nManza_Num.shape\n\n(301784, 1)\n\n\n\nYa tenemos un dataframe con las claves en string y los indices como campo llave primaria con NAN verdaderos\n\n\nAhora vamos a hacer una union entre estos resultados y los el dataframe filtrado (All_Data_filtered) con base a su indice. Al ser un merge por indices, es recomendable que este este reiniciado (por lo que se entiende la necesidad de su reinicio en procesos anteriores).\n\n\nDe la union tendremos dos columnas con claves manzanas, las cuales las usaremos en una función para asignnación de clave corregida\n\n\n### Union entre tablas\nUSO_MANZAS = All_Data.merge(Manza_Num,\n                            left_index = True,\n                            right_index = True)\nUSO_MANZAS.head(3)                                   \n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      manzana_x\n      latitud\n      longitud\n      manzana_y\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      9.007E+14\n      19.368088\n      -99.132832\n      0900700000000000\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      9.007E+14\n      19.354583\n      -99.061529\n      0900700000000000\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      FIESTA\n      9.003E+14\n      19.332512\n      -99.175247\n      0900300000000000\n    \n  \n\n\n\n\n\nLa asignacion de clave correcta: se lleva a cabo considerando las combianciones de resultados posibles entre las dos columnas de nombre manzanas (x,y). De lo anterior se obtienen las siguientes reglas de negocios:\n\n\nSi manzana_x == manzana_x & manzana_y == manzana_y, entonces el valor sera manzana_y\nSi manzana_x == manzana_x & manzana_y != manzana_y, entonces el valor sera manzana_x\nSi ninguno de los dos anteriores se cumple se asigna NAN\n\n\nCon base a las reglas se configura la función:\n\n\n### Creamos una función\ndef manzan_a(C):\n    if ((C.manzana_x == C.manzana_x) & (C.manzana_y == C.manzana_y)):\n        return C.manzana_y\n    elif ((C.manzana_x == C.manzana_x) & (C.manzana_y != C.manzana_y)):\n        return C.manzana_x\n    else:\n        return np.nan\n\n\nSe aplica la funcion y se eliminan las dimensiones no necesarias\n\n\n### Aplicamos la función\nUSO_MANZAS['CVEGEO'] = USO_MANZAS.apply(manzan_a, axis = 1)\n\n## Eliminamos las dimensiones no necesarias y tenemos la tabla de inicio\n\nUSO_MANZAS = USO_MANZAS.drop(['manzana_x', 'manzana_y'], axis = 1)\n\nUSO_MANZAS.head(3)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      latitud\n      longitud\n      CVEGEO\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      19.368088\n      -99.132832\n      0900700000000000\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      19.354583\n      -99.061529\n      0900700000000000\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      FIESTA\n      19.332512\n      -99.175247\n      0900300000000000\n    \n  \n\n\n\n\n\nAhora vamos a contar los eventos de una determinada clase en el tipo de incidentes estan inmersos en las manzanas. Para la forma con columna y claves manzanas, seleccionamos unicamente las columnas de trabajo, en este caso se eliminan longitud y latitud.\n\n\nPara contabilizar las clases en la columna haremos uso de un dataframe dummy\n\n\n### Se eliminan columnas no necesarias\n### Para contabilizar, notamos que la descripcion del incidente esta en fila,\n### por lo que tenemos que crear un dataframe dummy\n\nUSO_MANZAS_DMY = pd.get_dummies(USO_MANZAS.drop(['latitud','longitud'], axis = 1), \n                                     columns=[\"Incidente\"], \n                                     prefix=[\"DM\"])\n\nUSO_MANZAS_DMY.head(3)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      CVEGEO\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      0900700000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      0900700000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      2\n      C5/210101/01973\n      Disturbio\n      0900300000000000\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n  \n\n\n\n\n\nAhora que tenemos nuestro dataframe dummy podemos contar los elementos de cada clase en las manzanas, para eso agrupamos y sumamos\n\n\n### Agrupación de dataframe Dummy\n\nMANZANA_DUMMMY = pd.DataFrame(USO_MANZAS_DMY.groupby(['CVEGEO']).agg({'DM_AGUA_N': 'sum', \n                                                                      'DM_AGUA_P': 'sum',\n                                                                      'DM_BASURA_P': 'sum',\n                                                                      'DM_CORTO_ELE': 'sum',\n                                                                      'DM_DROGADO': 'sum',\n                                                                      'DM_EBRIO': 'sum',\n                                                                      'DM_ESCANDALO': 'sum',\n                                                                      'DM_FIESTA': 'sum',\n                                                                      'DM_FUGAS_N': 'sum',\n                                                                      'DM_GRAFITI': 'sum',\n                                                                      'DM_PERSO_R': 'sum',\n                                                                      'DM_VEHICULO': 'sum'\n                                                                      }).reset_index())\nMANZANA_DUMMMY.head(3)                                                           \n\n\n\n\n\n  \n    \n      \n      CVEGEO\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      0900000000000000\n      202.0\n      1684.0\n      190.0\n      4\n      1660.0\n      9917.0\n      8109.0\n      5349.0\n      11\n      94.0\n      439.0\n      971.0\n    \n    \n      1\n      0900200000000000\n      4.0\n      102.0\n      8.0\n      0\n      170.0\n      841.0\n      994.0\n      1353.0\n      0\n      7.0\n      15.0\n      95.0\n    \n    \n      2\n      090020001003A003\n      0.0\n      0.0\n      0.0\n      0\n      0.0\n      0.0\n      2.0\n      0.0\n      0\n      0.0\n      0.0\n      0.0\n    \n  \n\n\n\n\n\nSe une la tabla y seleccionamos aquellos elementos para crear el Desorden Social y fisico. Se unen la tabla DATA_FIN_USE y MANZANA_DUMMMY. Esto se hace en esa tabla porque debemos recordar que las manzanas tienen su asignacion de clave alcaldias.\n\n\n### Union de tablas \nSOCIAL_FISICO = DATA_FIN_USE.merge(MANZANA_DUMMMY,\n                                   left_on = 'CVEGEO',\n                                   right_on = 'CVEGEO',\n                                   how = 'left')\nSOCIAL_FISICO.head(2)\n\n\n\n\n\n  \n    \n      \n      ENTIDAD\n      NOM_ENT\n      MUN\n      NOM_MUN\n      LOC\n      NOM_LOC\n      ID_COL\n      CVE_COL\n      NOM_COL\n      AGEB\n      ...\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0898\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      09\n      Ciudad de México\n      010\n      Álvaro Obregón\n      0001\n      Álvaro Obregón\n      1656\n      10-085\n      HERON PROAL\n      0900\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n2 rows × 31 columns\n\n\n\n\n4.3.1 Desorden a nivel Alcaldia\n\nDe la misma forma que se ejecuto codigo pasado, lo que necesitamos es el grupamiento de datos por nivel alcaldia para calcular la componente de Desorden Social por “PCA”\n\n\nDesorden Social\n\n\n### Agrupamiento de datos por nivel Alcaldia para \"PCA\" DESORDEN SOCIAL\n\nSOCIAL_ALPCA = pd.DataFrame(SOCIAL_FISICO.groupby(['MUN']).agg({'DM_DROGADO': 'sum',\n                                                                'DM_EBRIO':'sum',\n                                                                'DM_ESCANDALO': 'sum',\n                                                                'DM_FIESTA':'sum',\n                                                                'DM_BASURA_P': 'sum',\n                                                                'DM_PERSO_R': 'sum'}).reset_index())\n\nSOCIAL_ALCAL = CONC_DIS(SOCIAL_ALPCA, 'MUN', 'SOCIAL_MUN')\nSOCIAL_ALCAL.head(2)\n\n\n Total de la variancia explicada por la componente \n 76.681 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      SOCIAL_MUN\n    \n  \n  \n    \n      0\n      002\n      -0.108228\n    \n    \n      1\n      003\n      1.059589\n    \n  \n\n\n\n\n\nDesorden Físico\n\n\n### Agrupamiento de datos por nivel Alcaldia para \"PCA\" DESORDEN FISICO\n\nFISICO_ALPCA = pd.DataFrame(SOCIAL_FISICO.groupby(['MUN']).agg({'DM_VEHICULO': 'sum',\n                                                                'DM_GRAFITI':'sum',\n                                                                'DM_AGUA_P': 'sum',\n                                                                'DM_AGUA_N':'sum',\n                                                                'DM_CORTO_ELE': 'sum',\n                                                                'DM_FUGAS_N': 'sum'}).reset_index())\n\nFISICO_ALCAL = CONC_DIS(FISICO_ALPCA, 'MUN','FISICO_MUN')\nFISICO_ALCAL.head(2)\n\n\n Total de la variancia explicada por la componente \n 60.443 %\n\n\n\n\n\n\n  \n    \n      \n      MUN\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      002\n      -1.863468\n    \n    \n      1\n      003\n      0.573604\n    \n  \n\n\n\n\n\nAhora se unen los resultados de la concentración de desventajas con los resultados del desorden social y físico\n\n\n### Union Desventajas + Desorden Social y Fisico\n\nDESVE_ALCA = DESVE_ALCA.merge(SOCIAL_ALCAL, \n                              left_on = 'MUN', \n                              right_on = 'MUN', \n                              how = 'inner').merge(FISICO_ALCAL,\n                                                   left_on = 'MUN',\n                                                   right_on = 'MUN',\n                                                   how = 'inner')\nDESVE_ALCA                             \n\n\n\n\n\n  \n    \n      \n      MUN\n      DIS_MUN\n      SOCIAL_MUN\n      FISICO_MUN\n    \n  \n  \n    \n      0\n      002\n      -0.996294\n      -0.108228\n      -1.863468\n    \n    \n      1\n      003\n      -0.069455\n      1.059589\n      0.573604\n    \n    \n      2\n      004\n      -1.304359\n      -2.826147\n      -2.381901\n    \n    \n      3\n      005\n      2.040898\n      2.975016\n      3.574120\n    \n    \n      4\n      006\n      -0.650310\n      0.204031\n      -0.687370\n    \n    \n      5\n      007\n      5.736332\n      4.864047\n      2.623189\n    \n    \n      6\n      008\n      -1.099762\n      -2.475364\n      -1.962040\n    \n    \n      7\n      009\n      -1.163220\n      -3.290602\n      -2.487223\n    \n    \n      8\n      010\n      0.533438\n      1.033927\n      0.873328\n    \n    \n      9\n      011\n      -0.609511\n      -1.867119\n      -0.548826\n    \n    \n      10\n      012\n      0.688221\n      -0.280469\n      2.281060\n    \n    \n      11\n      013\n      0.183677\n      -2.229841\n      -1.260814\n    \n    \n      12\n      014\n      -1.302296\n      -0.326258\n      -0.580746\n    \n    \n      13\n      015\n      -0.151071\n      1.979941\n      3.063466\n    \n    \n      14\n      016\n      -1.227027\n      1.155803\n      -0.424593\n    \n    \n      15\n      017\n      -0.609259\n      0.131673\n      -0.791786\n    \n  \n\n\n\n\n\n\n4.3.2 Desorden a nivel Colonia\n\nPara este caso y al contar con la geometria de las colonias previamente usada, contaremos el total de eventos de cada una de las clases en las colonias. Para eso necesitamos inicialmente que nuestra base de datos sea espacializada, es decir que cuente con una columna de geometria espacial\n\n\nComenzamos usando la tabla que habiamos creado con anterioridad, aquella donde se hicieron las correciones a la clave manzanada (USO_MANZAS). De la tabla se crean las geometrias las cuales necesitan tener definido un sistema de proyección.\n\n\nComo notamos en los datos, el sistema de coordendas se encuentra en longitud / latitud, por lo que se asigna una proyeccion geografica wgs84 con epsg 4326\n\n\nUSO_MANZAS = gpd.GeoDataFrame(USO_MANZAS,\n                             geometry = gpd.points_from_xy(USO_MANZAS.longitud,\n                                                           USO_MANZAS.latitud), crs=4326).drop(['latitud','longitud'], axis = 1).to_crs(6362)\nUSO_MANZAS.head(2)\n\n\n\n\n\n  \n    \n      \n      folio\n      Categoria\n      Incidente\n      CVEGEO\n      geometry\n    \n  \n  \n    \n      0\n      C5/210101/00770\n      Disturbio\n      FIESTA\n      0900700000000000\n      POINT (2800344.195 821939.006)\n    \n    \n      1\n      C5/210101/01333\n      Disturbio\n      FIESTA\n      0900700000000000\n      POINT (2807842.900 820599.774)\n    \n  \n\n\n\n\n\nValidamos que ambos se encuentren en el mismo sistema de coordenadas (por si algo no tenemos bien, mejor validar)\n\n\nprint (USO_MANZAS.crs)\nprint (COLONIAS_CDMX.crs)\n\nepsg:6362\nepsg:6362\n\n\n\nAhora se van a contabilizar el número de clases de geometria punto dentro de las colonias de geometria poligonal, para que eso suceda, debemos hacer un join geoespacial.\n\n\n### Hacemos un join geoespacial de los puntos que se encuentran contenidos dentro del poligono\n\nMANZANA_911 = gpd.sjoin(COLONIAS_CDMX, \n                        USO_MANZAS[['folio', 'Categoria', \n                                       'Incidente',\n                                       'geometry']], \n                         how = \"left\", \n                         op = 'contains').rename({'CVEUT':'CVE_COL'}, axis = 1)\nMANZANA_911.head(2)\n\n\n\n\n\n  \n    \n      \n      ENT\n      CVEDT\n      NOMDT\n      DTTOLOC\n      CVE_COL\n      NOMUT\n      ID\n      geometry\n      index_right\n      folio\n      Categoria\n      Incidente\n    \n  \n  \n    \n      0\n      9\n      2\n      AZCAPOTZALCO\n      05\n      02-001\n      AGUILERA\n      1\n      POLYGON ((2797370.839 833543.566, 2797391.142 ...\n      246882.0\n      C5/20211016/00159\n      Disturbio\n      ESCANDALO\n    \n    \n      0\n      9\n      2\n      AZCAPOTZALCO\n      05\n      02-001\n      AGUILERA\n      1\n      POLYGON ((2797370.839 833543.566, 2797391.142 ...\n      256451.0\n      C5/20211016/00110\n      Disturbio\n      FIESTA\n    \n  \n\n\n\n\n\nRetomamos parte de los procesos anteriores y aplicamos un dataframe dummys para contabilizar en este caso a nivel manzana\n\n\n## Creación del dataframe Dummy\nMANZAS_911_DMY = pd.get_dummies(MANZANA_911, \n                                columns = [\"Incidente\"],\n                                prefix = [\"DM\"])\n\n### Ahora que tenemos nuestro dummy podemos contar, para esto agrupamos\n\nMANZANA_911_DUMMMY = pd.DataFrame(MANZAS_911_DMY.groupby(['CVE_COL']).agg({'DM_AGUA_N': 'sum', \n                                                                           'DM_AGUA_P': 'sum',\n                                                                           'DM_BASURA_P': 'sum',\n                                                                           'DM_CORTO_ELE': 'sum',\n                                                                           'DM_DROGADO': 'sum',\n                                                                           'DM_EBRIO': 'sum',\n                                                                           'DM_ESCANDALO': 'sum',\n                                                                           'DM_FIESTA': 'sum',\n                                                                           'DM_FUGAS_N': 'sum',\n                                                                           'DM_GRAFITI': 'sum',\n                                                                           'DM_PERSO_R': 'sum',\n                                                                           'DM_VEHICULO': 'sum'\n                                                                          }).reset_index())\nMANZANA_911_DUMMMY.head(5)\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DM_AGUA_N\n      DM_AGUA_P\n      DM_BASURA_P\n      DM_CORTO_ELE\n      DM_DROGADO\n      DM_EBRIO\n      DM_ESCANDALO\n      DM_FIESTA\n      DM_FUGAS_N\n      DM_GRAFITI\n      DM_PERSO_R\n      DM_VEHICULO\n    \n  \n  \n    \n      0\n      02-001\n      0\n      4\n      1\n      0\n      9.0\n      21.0\n      27.0\n      14\n      0\n      0\n      1\n      1\n    \n    \n      1\n      02-002\n      4\n      7\n      0\n      0\n      16.0\n      77.0\n      67.0\n      52\n      0\n      0\n      2\n      3\n    \n    \n      2\n      02-003\n      0\n      3\n      0\n      0\n      2.0\n      18.0\n      11.0\n      10\n      0\n      0\n      0\n      1\n    \n    \n      3\n      02-005\n      0\n      0\n      0\n      0\n      3.0\n      13.0\n      21.0\n      13\n      0\n      1\n      6\n      3\n    \n    \n      4\n      02-006\n      1\n      1\n      0\n      0\n      22.0\n      78.0\n      66.0\n      56\n      0\n      0\n      5\n      7\n    \n  \n\n\n\n\n\nUna vez realizado lo anterior, podemos validar que las manzanas no se repiten\n\n\nMANZANA_911_DUMMMY.CVE_COL.value_counts()\n\n02-001    1\n10-250    1\n11-018    1\n11-017    1\n11-016    1\n         ..\n07-007    1\n07-006    1\n07-005    1\n07-004    1\n17-086    1\nName: CVE_COL, Length: 1814, dtype: int64\n\n\nDesorden Social\n\nPara construirlo repetimos los procesos anteriores para agrupacion y aplicacion de la función.\n\n\n### Agrupamiento de datos por nivel colonia para \"PCA\" DESORDEN SOCIAL\n\nSOC_POINT_COL = pd.DataFrame(MANZANA_911_DUMMMY.groupby(['CVE_COL']).agg({'DM_DROGADO': 'sum',\n                                                                           'DM_EBRIO':'sum',\n                                                                           'DM_ESCANDALO': 'sum',\n                                                                           'DM_FIESTA':'sum',\n                                                                           'DM_BASURA_P': 'sum',\n                                                                           'DM_PERSO_R': 'sum'}).reset_index())\n\nSOCIAL_PNT_COL = CONC_DIS(SOC_POINT_COL, 'CVE_COL','SOCIAL_COL')\n\nSOCIAL_PNT_COL.head(2)\n\n\n Total de la variancia explicada por la componente \n 56.94 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      SOCIAL_COL\n    \n  \n  \n    \n      0\n      02-001\n      -0.850950\n    \n    \n      1\n      02-002\n      0.679359\n    \n  \n\n\n\n\n\nDesorden fisico\n\n\nPara construirlo repetimos los procesos anteriores para agrupacion y aplicacion de la función.\n\n\n### Desorden Fisico a nivel colonia\n\nFISI_POINT_COL = pd.DataFrame(MANZANA_911_DUMMMY.groupby(['CVE_COL']).agg({'DM_VEHICULO': 'sum',\n                                                                           'DM_GRAFITI':'sum',\n                                                                           'DM_AGUA_P': 'sum',\n                                                                           'DM_AGUA_N':'sum',\n                                                                           'DM_CORTO_ELE': 'sum',\n                                                                           'DM_FUGAS_N': 'sum'}).reset_index())\nFISICO_PNT_COL = CONC_DIS(FISI_POINT_COL, 'CVE_COL','FISICO_COL')\n\nFISICO_PNT_COL.head(2)\n\n\n Total de la variancia explicada por la componente \n 31.445 %\n\n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      FISICO_COL\n    \n  \n  \n    \n      0\n      02-001\n      -0.978118\n    \n    \n      1\n      02-002\n      -0.159875\n    \n  \n\n\n\n\n\nAhora se unen los resultados de la concentración de desventajas con los resultados del desorden social y físico\n\n\n### Union Desventajas + Desorden Social y Fisico\n\nDESVE_COL = DESVE_COL.merge(SOCIAL_PNT_COL, \n                            left_on = 'CVE_COL', \n                            right_on = 'CVE_COL', \n                            how = 'inner').merge(FISICO_PNT_COL,\n                                                   left_on = 'CVE_COL',\n                                                   right_on = 'CVE_COL',\n                                                   how = 'inner')\nDESVE_COL                             \n\n\n\n\n\n  \n    \n      \n      CVE_COL\n      DIS_COL\n      SOCIAL_COL\n      FISICO_COL\n    \n  \n  \n    \n      0\n      02-001\n      -1.121714\n      -0.850950\n      -0.978118\n    \n    \n      1\n      02-002\n      -0.533961\n      0.679359\n      -0.159875\n    \n    \n      2\n      02-003\n      -1.193403\n      -1.380046\n      -1.018299\n    \n    \n      3\n      02-005\n      -1.175400\n      -0.935409\n      -0.580366\n    \n    \n      4\n      02-006\n      -0.459954\n      1.067722\n      -0.455032\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1792\n      17-082\n      1.378785\n      2.549871\n      1.460434\n    \n    \n      1793\n      17-083\n      4.868703\n      4.772759\n      4.023627\n    \n    \n      1794\n      17-084\n      4.937573\n      4.298375\n      2.267321\n    \n    \n      1795\n      17-085\n      -0.184246\n      1.327181\n      1.125787\n    \n    \n      1796\n      17-086\n      0.207799\n      4.602840\n      1.469439\n    \n  \n\n1797 rows × 4 columns"
  },
  {
    "objectID": "data.html#resultados-finales",
    "href": "data.html#resultados-finales",
    "title": "2  Data Acquisition and Preprocessing",
    "section": "4.4 Resultados Finales",
    "text": "4.4 Resultados Finales\n\nEn este punto tenemos listas nuestras bases de datos a nivel colonia y alcaldia con las varibles de concentración de desventajas, Desorden Social y Desorden Físico.\n\n\nA modo de resguardo, exportaremos esta información\n\n\n#### Información a nivel Colonia : Concentración de desventajas + Desorden Social + Desorden Físico\n\nDESVE_COL.head(5)\n\nDESVE_COL.to_csv(Entradas + \"Variables_Colonias.csv\", encoding = 'Latin-1', index = False)\n\n\n#### Información a nivel Alcaldia : Concentración de desventajas + Desorden Social + Desorden Físico.\n\nDESVE_ALCA.head(5)\n\nDESVE_ALCA.to_csv(Entradas + \"Variables_Alcaldia.csv\", encoding = 'Latin-1', index = False)"
  }
]